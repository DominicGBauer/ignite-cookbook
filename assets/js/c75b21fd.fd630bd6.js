"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[2666],{4137:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>u});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},m=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),d=p(n),u=o,f=d["".concat(l,".").concat(u)]||d[u]||c[u]||r;return n?a.createElement(f,i(i({ref:t},m),{},{components:n})):a.createElement(f,i({ref:t},m))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1467:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(7462),o=(n(7294),n(4137));const r={title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",tags:["MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-02-05T00:00:00.000Z")},i="Remove Mobx-State-Tree",s={unversionedId:"recipes/RemoveMobxStateTree",id:"recipes/RemoveMobxStateTree",title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",source:"@site/docs/recipes/RemoveMobxStateTree.md",sourceDirName:"recipes",slug:"/recipes/RemoveMobxStateTree",permalink:"/docs/recipes/RemoveMobxStateTree",draft:!1,tags:[{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1707844850,formattedLastUpdatedAt:"Feb 13, 2024",frontMatter:{title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",tags:["MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-02-05T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Redux",permalink:"/docs/recipes/Redux"},next:{title:"Sample YAML for CircleCi for Ignite",permalink:"/docs/recipes/SampleYAMLCircleCI"}},l={},p=[{value:"Steps",id:"steps",level:2},{value:"Conclusion",id:"conclusion",level:2}],m={toc:p};function c(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"remove-mobx-state-tree"},"Remove Mobx-State-Tree"),(0,o.kt)("p",null,"By default, Ignite uses ",(0,o.kt)("a",{parentName:"p",href:"https://mobx-state-tree.js.org/"},"MobX-State-Tree")," as the default state management solution. While we love ",(0,o.kt)("a",{parentName:"p",href:"https://docs.infinite.red/ignite-cli/concept/MobX-State-Tree/"},"MobX-State-Tree at Infinite Red"),", we understand the landscape is rich with great alternatives that you may want to use instead."),(0,o.kt)("p",null,'This guide will show you how to remove Mobx-State-Tree from an Ignite-generated project and get to a "blank slate" with no state management at all.'),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Let's start by removing all MobX-related dependencies")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn remove mobx mobx-react-lite mobx-state-tree reactotron-mst\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Ignite places all MobX-State-Tree models in the ",(0,o.kt)("inlineCode",{parentName:"li"},"models/"),". Remove this entire directory and all files within it, these are not needed anymore.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"rm -rf ./app/models\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"If you are migrating a project with several existing models, you may want to keep a copy of these around for reference as you migrate to your new system.")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Remove the ",(0,o.kt)("inlineCode",{parentName:"li"},"reactotron-mst")," plugin from Reactotron's config")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"devtools/ReactotronConfig.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { mst } from "reactotron-mst"\n\n...\n\nconst reactotron = Reactotron.configure({\n  name: require("../../package.json").name,\n  onConnect: () => {\n    /** since this file gets hot reloaded, let\'s clear the past logs every time we connect */\n    Reactotron.clear()\n  },\n--}).use(\n--  mst({\n--    /** ignore some chatty `mobx-state-tree` actions  */\n--    filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,\n--  }),\n--)\n++})\n')),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},"Remove ",(0,o.kt)("inlineCode",{parentName:"li"},"observer()")," wrapped components and reformat as functional React components")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Do a project-wide search for ",(0,o.kt)("inlineCode",{parentName:"li"},"observer(")," and replace each component instance with the following pattern:")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"app/screens/WelcomeScreen.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { observer } from "mobx-react-lite"\n\n--export const WelcomeScreen: FC<WelcomeScreenProps> = observer(function WelcomeScreen(props) {\n++export const WelcomeScreen: FC<WelcomeScreenProps> = (props) => {\n    ...\n--})\n++}\n')),(0,o.kt)("ol",{start:5},(0,o.kt)("li",{parentName:"ol"},"Remove ",(0,o.kt)("inlineCode",{parentName:"li"},"useStores()")," from components")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Do a project-wide search for ",(0,o.kt)("inlineCode",{parentName:"li"},"useStores")," and remove each instance."),(0,o.kt)("li",{parentName:"ul"},"If you're converting to a different state management solution, you'll need to swap the data we get from ",(0,o.kt)("inlineCode",{parentName:"li"},"useStores")," to your new solution. Or you can swap in temporary hardcoded values to prevent crashes while you migrate. (just don't forget about it!)")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { useStores } from "../models"\n\nconst AppStack = () => {\n--  const { authenticationStore: { isAuthenticated } } = useStores()\n++  const isAuthenticated = false // TODO: TEMPORARY VALUE - replace with alternative state management solution\n')),(0,o.kt)("ol",{start:6},(0,o.kt)("li",{parentName:"ol"},"Update the ",(0,o.kt)("a",{parentName:"li",href:"https://docs.infinite.red/ignite-cli/concept/Generator-Templates/"},"Ignite Generator Templates"),"!")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Follow the same pattern to replace ",(0,o.kt)("inlineCode",{parentName:"li"},"observer()"),". This will allow you to quickly generate screens and components via ",(0,o.kt)("inlineCode",{parentName:"li"},"npx ignite-cli generate screen NewScreen")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"npx ignite-cli generate component NewComponent")," and use your updated syntax."),(0,o.kt)("li",{parentName:"ul"},"I also recommend customizing these however else you prefer!")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"ignite/templates/component/NAME.tsx.ejs"),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"ignite/templates/screen/NAMEScreen.tsx.ejs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { observer } from "mobx-react-lite"\n\n--export const <%= props.pascalCaseName %> = observer(function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {\n++export const <%= props.pascalCaseName %> = (props: <%= props.pascalCaseName %>Props) => {\n    ...\n--})\n++}\n')),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Remove old MobX-State-Tree store initialization & hydration code in ",(0,o.kt)("inlineCode",{parentName:"li"},"app.tsx"),".")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We still need to call ",(0,o.kt)("inlineCode",{parentName:"li"},"hideSplashScreen")," in a ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect")," so the app loads without needing to hydrate a store first.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"app/app.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { useInitialRootStore } from "./models"\n\n--const { rehydrated } = useInitialRootStore(() => {\n--setTimeout(hideSplashScreen, 500)\n--})\n++React.useEffect(() => {\n++    setTimeout(hideSplashScreen, 500)\n++}, [])\n\n--if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null\n++if (!isNavigationStateRestored || !areFontsLoaded) return null\n')),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},"Remove any remaining ",(0,o.kt)("inlineCode",{parentName:"li"},"/models")," imports")),(0,o.kt)("p",null,"Your app might have a few remaining references to replace. In the Ignite Demo App, we need to replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"EpisodeSnapshotIn")," type which was previously derived from the MST model. Instead, we'll use ",(0,o.kt)("inlineCode",{parentName:"p"},"EpisodeItem")," from our API types."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"app/services/api/api.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import type { ApiConfig, ApiFeedResponse } from "./api.types"\n--import type { EpisodeSnapshotIn } from "../../models/Episode"\n++import type { ApiConfig, ApiFeedResponse, EpisodeItem } from "./api.types"\n\n\n--async getEpisodes(): Promise<{ kind: "ok"; episodes: EpisodeSnapshotIn[] } | GeneralApiProblem> {\n++async getEpisodes(): Promise<{ kind: "ok"; episodes: EpisodeItem[] } | GeneralApiProblem> {\n// make the api call\n\n--// This is where we transform the data into the shape we expect for our MST model.\n--const episodes: EpisodeSnapshotIn[] =\n--  rawData?.items.map((raw) => ({\n--    ...raw,\n--  })) ?? []\n++const episodes = rawData?.items ?? []\n')),(0,o.kt)("h2",{id:"conclusion"},"Conclusion"),(0,o.kt)("p",null,'You should be able to build and run your app! It won\'t have any data...but you now have a "blank slate" to setup your state management solution of choice.'),(0,o.kt)("p",null,"For next steps, we have recipes for migrating to"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/recipes/Redux"},"Redux")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/recipes/Zustand"},"Zustand")),(0,o.kt)("li",{parentName:"ul"},"Or you can roll your own!")))}c.isMDXComponent=!0}}]);