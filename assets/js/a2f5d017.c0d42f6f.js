"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[9524],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,f=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(f,i(i({ref:t},c),{},{components:n})):r.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3052:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var r=n(7462),o=(n(7294),n(3905));const a={title:"Redux",description:"How to migrate a Mobx-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-01-16T00:00:00.000Z")},i="Redux",s={unversionedId:"recipes/Redux",id:"recipes/Redux",title:"Redux",description:"How to migrate a Mobx-State-Tree project to Redux",source:"@site/docs/recipes/Redux.md",sourceDirName:"recipes",slug:"/recipes/Redux",permalink:"/docs/recipes/Redux",draft:!1,tags:[{label:"Redux",permalink:"/docs/tags/redux"},{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1705520185,formattedLastUpdatedAt:"Jan 17, 2024",frontMatter:{title:"Redux",description:"How to migrate a Mobx-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-01-16T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"React Native Vision Camera",permalink:"/docs/recipes/ReactNativeVisionCamera"},next:{title:"Sample YAML for CircleCi for Ignite",permalink:"/docs/recipes/SampleYAMLCircleCI"}},l={},p=[{value:"Remove Mobx-State-Tree",id:"remove-mobx-state-tree",level:2},{value:"Add Redux",id:"add-redux",level:2},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Create Store",id:"create-store",level:4},{value:"Add State",id:"add-state",level:4},{value:"Add Redux Provider",id:"add-redux-provider",level:4},{value:"Hook up Components",id:"hook-up-components",level:4},{value:"Persistence",id:"persistence",level:2},{value:"Reactotron Support",id:"reactotron-support",level:2}],c={toc:p};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"redux"},"Redux"),(0,o.kt)("p",null,"This guide will show you how to migrate a Mobx-State-Tree project (Ignite's default) to Redux, using a newly created Ignite project as our example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"npx ignite-cli new ReduxApp --yes --removeDemo\n")),(0,o.kt)("p",null,"If you are migrating an existing project these steps still apply, but you may need to migrate your existing state tree and other additional functionality."),(0,o.kt)("h2",{id:"remove-mobx-state-tree"},"Remove Mobx-State-Tree"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remove all Mobx-related dependencies from ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json"),", then run ",(0,o.kt)("inlineCode",{parentName:"li"},"yarn")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"npm i"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--"mobx": "6.10.2",\n--"mobx-react-lite": "4.0.5",\n--"mobx-state-tree": "5.3.0",\n\n--"reactotron-mst": "3.1.5",\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Ignite created default boilerplate Mobx-State-Tree files in the ",(0,o.kt)("inlineCode",{parentName:"p"},"models/")," directory. Remove this entire directory and all files within it, these are not needed for Redux.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"devtools/ReactotronConfig.ts")," remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"reactotron-mst")," plugin. We can come back to ",(0,o.kt)("a",{parentName:"p",href:"#reactotron-support"},"add a Redux plugin")," later."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { mst } from "reactotron-mst"\n\n...\n\nconst reactotron = Reactotron.configure({\n  name: require("../../package.json").name,\n  onConnect: () => {\n    /** since this file gets hot reloaded, let\'s clear the past logs every time we connect */\n    Reactotron.clear()\n  },\n--}).use(\n--  mst({\n--    /** ignore some chatty `mobx-state-tree` actions  */\n--    filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,\n--  }),\n--)\n++})\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remove all ",(0,o.kt)("inlineCode",{parentName:"li"},"observer()")," components and reformat as normal React components. Do a project-wide search for ",(0,o.kt)("inlineCode",{parentName:"li"},"observer(")," and replace each component instance with the following pattern:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { observer } from "mobx-react-lite"\n\n--export const WelcomeScreen: FC<WelcomeScreenProps> = observer(function WelcomeScreen(props) {\n++export const WelcomeScreen: FC<WelcomeScreenProps> = (props) => {\n    ...\n--})\n++}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"(optional) Don't forget to update your ",(0,o.kt)("a",{parentName:"li",href:"https://docs.infinite.red/ignite-cli/concept/Generator-Templates/"},"Ignite Generator Templates"),"!",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Follow the same pattern to replace ",(0,o.kt)("inlineCode",{parentName:"li"},"observer()"),". This will allow you to quickly generate screens and components via ",(0,o.kt)("inlineCode",{parentName:"li"},"npx ignite-cli generate screen NewScreen")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"npx ignite-cli generate component NewComponent")," and use your updated syntax. (You can customize these however you like!)"),(0,o.kt)("li",{parentName:"ul"},"Update ",(0,o.kt)("inlineCode",{parentName:"li"},"ignite/templates/component/NAME.tsx.ejs")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ignite/templates/screen/NAMEScreen.tsx.ejs"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { observer } from "mobx-react-lite"\n\n--export const <%= props.pascalCaseName %> = observer(function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {\n++export const <%= props.pascalCaseName %> = (props: <%= props.pascalCaseName %>Props) => {\n    ...\n--})\n++}\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remove old Mobx-State-Tree store initialization / hydration code in ",(0,o.kt)("inlineCode",{parentName:"li"},"app.tsx"),"."),(0,o.kt)("li",{parentName:"ul"},"Call ",(0,o.kt)("inlineCode",{parentName:"li"},"hideSplashScreen")," in a ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect")," so the app loads for now. We'll replace this code when we add ",(0,o.kt)("a",{parentName:"li",href:"#persistence"},"persistence")," below.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-diff"},'--import { useInitialRootStore } from "./models"\n\n--const { rehydrated } = useInitialRootStore(() => {\n--setTimeout(hideSplashScreen, 500)\n--})\n++useEffect(() => {\n++    setTimeout(hideSplashScreen, 500)\n++}, [])\n\n--if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null\n++if (!isNavigationStateRestored || !areFontsLoaded) return null\n')),(0,o.kt)("p",null,"You should be able to build and run your app! It won't have any data...but it's a good idea to check that it successfully runs before we move on."),(0,o.kt)("h2",{id:"add-redux"},"Add Redux"),(0,o.kt)("h4",{id:"install-dependencies"},"Install dependencies"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/introduction/getting-started#redux-toolkit"},"redux-tooklit is the current recommended approach"),", and you'll also need ",(0,o.kt)("inlineCode",{parentName:"p"},"react-redux")," bindings for your React Native app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @reduxjs/toolkit\nyarn add react-redux\n")),(0,o.kt)("h4",{id:"create-store"},"Create Store"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In a new file ",(0,o.kt)("inlineCode",{parentName:"li"},"app/store.ts"),", create your Redux store.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Create an initial store. We're using ",(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/usage/usage-guide#simplifying-store-setup-with-configurestore"},"Redux Toolkit's ",(0,o.kt)("inlineCode",{parentName:"a"},"configureStore"))," here for simplicity."),(0,o.kt)("li",{parentName:"ul"},"Export Typescript helpers for the rest of your app to stay type safe")))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { configureStore } from "@reduxjs/toolkit";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport counterReducer from "./counterSlice";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    // add other state here\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n')),(0,o.kt)("h4",{id:"add-state"},"Add State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add your state reducers or ",(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/usage/usage-guide#creating-slices-of-state"},"slices"),". We'll create a simple ",(0,o.kt)("inlineCode",{parentName:"li"},"counter")," slice for this example."),(0,o.kt)("li",{parentName:"ul"},"If you have an existing state tree with Mobx-State-Tree, you'll need to convert your tree into a series of Redux reducers.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Note: Redux does not define or validate your models like Mobx-State-Tree does. It is up to you to ensure the correct data is being set in your reducers.")))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"counterSlice.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createSlice } from "@reduxjs/toolkit";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: "counter",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;\n')),(0,o.kt)("h4",{id:"add-redux-provider"},"Add Redux Provider"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"app.tsx"),", wrap your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppNavigator")," with the react-redux Provider component"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Provider } from "react-redux";\nimport { store } from "./store/store";\n\n...\n\n<Provider store={store}>\n  <AppNavigator\n    linking={linking}\n    initialState={initialNavigationState}\n    onStateChange={onNavigationStateChange}\n  />\n</Provider>\n')),(0,o.kt)("h4",{id:"hook-up-components"},"Hook up Components"),(0,o.kt)("p",null,"You can now use selectors to grab data and ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch()")," to execute actions within your components. Here's an example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remember to use our exported ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppSelector")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppDispatch")," helpers for type safety")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WelcomeScreen.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import React, { FC } from "react";\nimport { View, ViewStyle } from "react-native";\nimport { Button, Text } from "app/components";\nimport { AppStackScreenProps } from "../navigators";\nimport { colors } from "../theme";\nimport { useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle";\nimport { useAppDispatch, useAppSelector } from "app/store/store";\nimport { decrement, increment } from "app/store/counterSlice";\n\ninterface WelcomeScreenProps extends AppStackScreenProps<"Welcome"> {}\n\nexport const WelcomeScreen: FC<WelcomeScreenProps> = () => {\n  const $containerInsets = useSafeAreaInsetsStyle(["top", "bottom"]);\n  const count = useAppSelector((state) => state.counter.value);\n  const dispatch = useAppDispatch();\n  return (\n    <View style={[$containerInsets, $container]}>\n      <Button text="Increment" onPress={() => dispatch(increment())} />\n      <Button text="Decrement" onPress={() => dispatch(decrement())} />\n      <Text text={`Count: ${count}`} />\n    </View>\n  );\n};\n\nconst $container: ViewStyle = {\n  flex: 1,\n  backgroundColor: colors.background,\n};\n')),(0,o.kt)("p",null,"You're now using Redux!"),(0,o.kt)("h2",{id:"persistence"},"Persistence"),(0,o.kt)("p",null,"Ignite ships with built-in persistence support for Mobx-State-Tree. We can add similar support for Redux by:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/rt2zz/redux-persist"},(0,o.kt)("inlineCode",{parentName:"a"},"redux-persist")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add redux-persist\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Modify ",(0,o.kt)("inlineCode",{parentName:"li"},"store.ts")," to include ",(0,o.kt)("inlineCode",{parentName:"li"},"redux-persist"))),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.ts")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { combineReducers, configureStore } from "@reduxjs/toolkit";\nimport counterReducer from "./counterSlice";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from "redux-persist";\nimport AsyncStorage from "@react-native-async-storage/async-storage";\n\nconst persistConfig = {\n  key: "root",\n  version: 1,\n  storage: AsyncStorage,\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Add a ",(0,o.kt)("inlineCode",{parentName:"li"},"PersistGate")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"app.tsx")," and replace any existing ",(0,o.kt)("inlineCode",{parentName:"li"},"hideSplashScreen")," calls with the ",(0,o.kt)("inlineCode",{parentName:"li"},"onBeforeLift")," callback")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"app.tsx")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'...\n\nimport { persistor, store } from "./store/store"\nimport { PersistGate } from "redux-persist/integration/react"\n\n...\n\nfunction App(props: AppProps) {\n  const { hideSplashScreen } = props\n...\n  const onBeforeLiftPersistGate = () => {\n    // If your initialization scripts run very fast, it\'s good to show the splash screen for just a bit longer to prevent flicker.\n    // Slightly delaying splash screen hiding for better UX; can be customized or removed as needed,\n    // Note: (vanilla Android) The splash-screen will not appear if you launch your app via the terminal or Android Studio. Kill the app and launch it normally by tapping on the launcher icon. https://stackoverflow.com/a/69831106\n    // Note: (vanilla iOS) You might notice the splash-screen logo change size. This happens in debug/development mode. Try building the app for release.\n    setTimeout(hideSplashScreen, 500)\n  }\n...\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      <ErrorBoundary catchErrors={Config.catchErrors}>\n        <GestureHandlerRootView style={$container}>\n          <Provider store={store}>\n            <PersistGate\n              loading={null}\n              onBeforeLift={onBeforeLiftPersistGate}\n              persistor={persistor}\n            >\n              <AppNavigator\n                linking={linking}\n                initialState={initialNavigationState}\n                onStateChange={onNavigationStateChange}\n              />\n            </PersistGate>\n          </Provider>\n        </GestureHandlerRootView>\n      </ErrorBoundary>\n    </SafeAreaProvider>\n  )\n}\n\nexport default App\n')),(0,o.kt)("p",null,"Your Redux state should now be persisted using AsyncStorage!"),(0,o.kt)("h2",{id:"reactotron-support"},"Reactotron Support"),(0,o.kt)("p",null,"Reactotron has a prebuilt plugin for Redux!"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.infinite.red/reactotron/plugins/redux/"},"Follow the instructions to install")))}u.isMDXComponent=!0}}]);