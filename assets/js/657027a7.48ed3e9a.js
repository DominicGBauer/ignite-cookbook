"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[3180],{5632:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=t(7624),o=t(4552);const a={title:"Migrating to MMKV",description:"How to migrate from React Native's AsyncStorage to MMKV",tags:["MMKV","AsyncStorage"],last_update:{author:"Frank Calise"},publish_date:new Date("2022-12-28T00:00:00.000Z")},i="Migrating to MMKV",s={id:"recipes/MigratingToMMKV",title:"Migrating to MMKV",description:"How to migrate from React Native's AsyncStorage to MMKV",source:"@site/docs/recipes/MigratingToMMKV.md",sourceDirName:"recipes",slug:"/recipes/MigratingToMMKV",permalink:"/docs/recipes/MigratingToMMKV",draft:!1,unlisted:!1,tags:[{label:"MMKV",permalink:"/docs/tags/mmkv"},{label:"AsyncStorage",permalink:"/docs/tags/async-storage"}],version:"current",lastUpdatedBy:"Frank Calise",lastUpdatedAt:1708554035,formattedLastUpdatedAt:"Feb 21, 2024",frontMatter:{title:"Migrating to MMKV",description:"How to migrate from React Native's AsyncStorage to MMKV",tags:["MMKV","AsyncStorage"],last_update:{author:"Frank Calise"},publish_date:"2022-12-28T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Maestro Setup",permalink:"/docs/recipes/MaestroSetup"},next:{title:"Patching/Building Android .aar From Source",permalink:"/docs/recipes/PatchingBuildingAndroid"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Project Dependencies",id:"project-dependencies",level:2},{value:"Code Changes",id:"code-changes",level:2}];function d(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,o.M)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"migrating-to-mmkv",children:"Migrating to MMKV"}),"\n",(0,r.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.a,{href:"https://github.com/mrousavy/react-native-mmkv",children:"MMKV"})," is said to be the fastest key/value storage for React Native. It has encryption support for secure local storage and also uses synchronous storage to simplify your application code."]}),"\n",(0,r.jsxs)(n.p,{children:["In this recipe, we'll convert our the Ignite demo project from using ",(0,r.jsx)(n.code,{children:"AsyncStorage"})," to ",(0,r.jsx)(n.code,{children:"MMKV"}),"."]}),"\n",(0,r.jsxs)(n.p,{children:["We'll get started by igniting a new application with the ",(0,r.jsx)(n.code,{children:"cng"})," workflow. We must do this since ",(0,r.jsx)(n.code,{children:"react-native-mmkv"})," contains native dependencies not included in the Expo SDK. Luckily with Ignite CLI, it's easy to jump into this workflow:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"npx ignite-cli new PizzaApp --workflow=cng --yes\ncd PizzaApp\n"})}),"\n",(0,r.jsx)(n.h2,{id:"project-dependencies",children:"Project Dependencies"}),"\n",(0,r.jsxs)(n.p,{children:["Install the ",(0,r.jsx)(n.code,{children:"react-native-mmkv"})," dependency into the project and run prebuild again to let Expo take care of the necessary adjustments to the native template."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"yarn add react-native-mmkv\nyarn prebuild\n"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsxs)(n.em,{children:["Note: For more information on Continuous Native Generation (CNG), you can read the ",(0,r.jsx)(n.a,{href:"https://docs.expo.dev/workflow/continuous-native-generation/",children:"Expo docs here"}),"."]})}),"\n",(0,r.jsx)(n.h2,{id:"code-changes",children:"Code Changes"}),"\n",(0,r.jsxs)(n.p,{children:["Open ",(0,r.jsx)(n.code,{children:"app/utils/storage.tsx"})," and modify the imports:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:'// error-line\nimport AsyncStorage from "@react-native-async-storage/async-storage";\nimport { MMKV } from "react-native-mmkv";\nconst storage = new MMKV();\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Now we'll remove any reference to ",(0,r.jsx)(n.code,{children:"AsyncStorage"})," and replace it with the proper API from ",(0,r.jsx)(n.code,{children:"MMKV"})]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-tsx",children:"/**\n * Loads a string from storage.\n *\n * @param key The key to fetch.\n */\n// error-line\nexport async function loadString(key: string): Promise<string | null> {\nexport function loadString(key: string): string | null {\n  try {\n    // error-line\n    return await AsyncStorage.getItem(key)\n    return storage.getString(key);\n  } catch {\n    // not sure why this would fail... even reading the RN docs I'm unclear\n    return null;\n  }\n}\n\n/**\n * Saves a string to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\n// error-line\nexport async function saveString(key: string, value: string): Promise<boolean> {\nexport function saveString(key: string, value: string): boolean {\n  try {\n    // error-line\n    await AsyncStorage.setItem(key, value)\n    storage.set(key, value);\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Loads something from storage and runs it thru JSON.parse.\n *\n * @param key The key to fetch.\n */\n// error-line\nexport async function load(key: string): Promise<any | null> {\nexport function load(key: string): any | null {\n  try {\n    // error-line\n    const almostThere = await AsyncStorage.getItem(key)\n    const almostThere = storage.getString(key);\n    return JSON.parse(almostThere);\n  } catch {\n    return null;\n  }\n}\n\n/**\n * Saves an object to storage.\n *\n * @param key The key to fetch.\n * @param value The value to store.\n */\n// error-line\nexport async function save(key: string, value: any): Promise<boolean> {\nexport function save(key: string, value: any): boolean {\n  try {\n    // error-line\n    await AsyncStorage.setItem(key, JSON.stringify(value))\n    saveString(key, JSON.stringify(value));\n    return true;\n  } catch {\n    return false;\n  }\n}\n\n/**\n * Removes something from storage.\n *\n * @param key The key to kill.\n */\n// error-line\nexport async function remove(key: string): Promise<void> {\nexport function remove(key: string): void {\n  try {\n    // error-line\n    await AsyncStorage.removeItem(key)\n    storage.delete(key);\n  } catch {}\n}\n\n/**\n * Burn it all to the ground.\n */\n// error-line\nexport async function clear(): Promise<void> {\nexport function clear(): void {\n  try {\n    // error-line\n    await AsyncStorage.clear()\n    storage.clearAll();\n  } catch {}\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Run the app in the iOS simulator to test the changes with ",(0,r.jsx)(n.code,{children:"yarn ios"}),". Navigate to the Podcast List screen:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:'Press "Tap to sign in!"'}),"\n",(0,r.jsx)(n.li,{children:'Press "Let\'s go!"'}),"\n",(0,r.jsx)(n.li,{children:'Tap on the "Podcast"'}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Now let's swipe the app away to close it. Re-open the app to see if the navigation picks up where we left off (which shows our storage is working to remember the navigation key we were last on)."}),"\n",(0,r.jsxs)(n.p,{children:["And that's it! Ignite is now configured with ",(0,r.jsx)(n.code,{children:"react-native-mmkv"})," over ",(0,r.jsx)(n.code,{children:"AsyncStorage"}),"."]})]})}function g(e={}){const{wrapper:n}={...(0,o.M)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>s,M:()=>i});var r=t(1504);const o={},a=r.createContext(o);function i(e){const n=r.useContext(a);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);