"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[6474],{3308:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>c,toc:()=>a});var t=o(7624),s=o(2172);const r={title:"Using Custom Vector Icons",description:"How to use your own vector icons using @expo/vector-icons",tags:["Expo","VectorIcons","FontAwesome","Icons"],last_update:{author:"Jovanni Lo"},publish_date:new Date("2023-11-10T00:00:00.000Z")},i="Custom Vector Icons",c={id:"recipes/CustomVectorIcons",title:"Using Custom Vector Icons",description:"How to use your own vector icons using @expo/vector-icons",source:"@site/docs/recipes/CustomVectorIcons.md",sourceDirName:"recipes",slug:"/recipes/CustomVectorIcons",permalink:"/docs/recipes/CustomVectorIcons",draft:!1,unlisted:!1,tags:[{label:"Expo",permalink:"/docs/tags/expo"},{label:"VectorIcons",permalink:"/docs/tags/vector-icons"},{label:"FontAwesome",permalink:"/docs/tags/font-awesome"},{label:"Icons",permalink:"/docs/tags/icons"}],version:"current",lastUpdatedBy:"Jovanni Lo",lastUpdatedAt:1718387777,formattedLastUpdatedAt:"Jun 14, 2024",frontMatter:{title:"Using Custom Vector Icons",description:"How to use your own vector icons using @expo/vector-icons",tags:["Expo","VectorIcons","FontAwesome","Icons"],last_update:{author:"Jovanni Lo"},publish_date:"2023-11-10T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Creating a Good Experience for Screen Readers",permalink:"/docs/recipes/CreatingGreateExperienceForScreenReaders"},next:{title:"Detox Intro",permalink:"/docs/recipes/DetoxIntro"}},l={},a=[{value:"Overview",id:"overview",level:2},{value:"Installation",id:"installation",level:2},{value:"Font Assets",id:"font-assets",level:2},{value:"Import our fonts",id:"import-our-fonts",level:2},{value:"VectorIcon Component",id:"vectoricon-component",level:2},{value:"Preloading our Fonts",id:"preloading-our-fonts",level:3},{value:"Modify the Icon Component",id:"modify-the-icon-component",level:2},{value:"Conclusion",id:"conclusion",level:2},{value:"Pro tip",id:"pro-tip",level:3}];function d(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.M)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"custom-vector-icons",children:"Custom Vector Icons"}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"As trendy as it is these days, not every app has to use emojis for all icons. Perhaps you want to incorporate a popular set through an icon font, such as FontAwesome, Glyphicons, or Ionicons, or maybe even use your own custom icons."}),"\n",(0,t.jsxs)(n.p,{children:["In this example, we will be implementing ",(0,t.jsx)(n.strong,{children:"FontAwesome 6"}),". This tutorial is written for the Ignite v9 CNG workflow; however, it generally still applies to a DIY or even a bare React Native project"]}),"\n",(0,t.jsx)(n.h2,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(n.p,{children:"If you haven't already, spin up a new Ignite application:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npx ignite-cli@next new PizzaApp --remove-demo --workflow=cng --yes\ncd PizzaApp\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, let's install the necessary dependencies. You can see complete installation instructions for ",(0,t.jsx)(n.code,{children:"@expo/vector-icons"})," ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/guides/icons/",children:"here"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sh",children:"npx expo install @expo/vector-icons\n"})}),"\n",(0,t.jsxs)(n.admonition,{type:"info",children:[(0,t.jsxs)(n.p,{children:["The goal of this recipe is to utilize custom icon fonts such as ",(0,t.jsx)(n.strong,{children:"FontAwesome 6"}),", which you will need to download from elsewhere."]}),(0,t.jsxs)(n.p,{children:["For built-in icon fonts from ",(0,t.jsx)(n.code,{children:"@expo/vector-icons"}),", you can skip the following setup and proceed directly to ",(0,t.jsx)(n.a,{href:"#modify-the-icon-component",children:"modifying the Icon component section"}),"."]})]}),"\n",(0,t.jsx)(n.h2,{id:"font-assets",children:"Font Assets"}),"\n",(0,t.jsxs)(n.p,{children:["Once everything is installed, it's now time to download the actual fonts that we're going to use to render our icons. First, download your font and place all ",(0,t.jsx)(n.code,{children:".ttf"})," files in our ",(0,t.jsx)(n.code,{children:"assets/fonts"})," folder."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{children:"ignite-project\n\u251c\u2500\u2500 app\n\u251c\u2500\u2500 ...\n\u251c\u2500\u2500 assets\n\u2502   \u251c\u2500\u2500 icons\n\u2502   \u251c\u2500\u2500 images\n\u2502   \u2514\u2500\u2500 fonts\n\u2502       \u251c\u2500\u2500 fa-light-300.ttf\n\u2502       \u251c\u2500\u2500 fa-regular-400.ttf\n\u2502       \u251c\u2500\u2500 fa-solid-900.ttf\n\u2502       \u251c\u2500\u2500 fa-thin-100.ttf\n\u2502       \u2514\u2500\u2500 fa-brands-400.ttf\n\u251c\u2500\u2500 ...\n\u2514\u2500\u2500 package.json\n\n"})}),"\n",(0,t.jsx)(n.h2,{id:"import-our-fonts",children:"Import our fonts"}),"\n",(0,t.jsxs)(n.p,{children:["It's now time to implement these icons to our ",(0,t.jsx)(n.code,{children:"Icon.tsx"})," component. We will be modifying the ",(0,t.jsx)(n.code,{children:"iconRegistry"})," object to map our icon names and all other changes explained below."]}),"\n",(0,t.jsxs)(n.p,{children:["First, open ",(0,t.jsx)(n.code,{children:"app/components/Icon.tsx"})," and then import ",(0,t.jsx)(n.code,{children:"createMultiStyleIconSet"})," from ",(0,t.jsx)(n.code,{children:"@expo/vector-icons"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-patch",children:" import {\n// error-line\n-  Image,\n   ImageStyle,\n   StyleProp,\n   TouchableOpacity,\n   TouchableOpacityProps,\n   View,\n   ViewStyle,\n// success-line-start\n+  TextProps,\n+  Platform,\n// success-line-end\n } from \"react-native\"\n// success-line\n+import { createMultiStyleIconSet } from '@expo/vector-icons'\n"})}),"\n",(0,t.jsxs)(n.p,{children:["Next, we will re-define our ",(0,t.jsx)(n.code,{children:"iconRegistry"})," and create our own custom ",(0,t.jsx)(n.code,{children:"Icon"})," component. We have our handy function to do it below."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"const iconFonts = {\n  thin: require('../../assets/fonts/fa-thin-100.ttf'),\n  light: require('../../assets/fonts/fa-light-300.ttf'),\n  regular: require('../../assets/fonts/fa-regular-400.ttf'),\n  solid: require('../../assets/fonts/fa-solid-900.ttf'),\n  brand: require('../../assets/fonts/fa-brands-400.ttf'),\n}\n\n/**\n * We are not using icon names\n * Why?\n *  - Reduce bundle size\n *  - Flexible & consistent names\n *  - Performance(?)\n *\n * How to add icons?\n *  1. Goto https://fontawesome.com/search\n *  2. Search for the icon you need\n *  3. Open the icon and copy the Unicode value\n *  4. Finally, map it below with a friendly name\n */\nexport const iconRegistry = {\n  back: 'f060',\n  bell: 'f0f3',\n  caretLeft: 'f0d9',\n  caretRight: 'f0da',\n  check: 'f00c',\n  clap: 'e1a8',\n  community: 'f500',\n  components: 'f5fd',\n  debug: 'f120',\n  github: 'f09b',\n  heart: 'f004',\n  hidden: 'f070',\n  ladybug: 'f188',\n  lock: 'f023',\n  menu: 'f0c9',\n  more: 'f141',\n  pin: 'f3c5',\n  podcast: 'f2ce',\n  settings: 'f013',\n  slack: 'f198',\n  view: 'f06e',\n  x: 'f00d',\n}\n\nconst createFontAwesomeStyle = (style: IconStyle, fontWeight: string) => {\n  const fontFile = iconFonts[style]\n  return {\n    fontFamily: `Font Awesome 6 Pro ${style}`,\n    fontFile,\n    fontStyle: Platform.select({\n      ios: {\n        fontWeight,\n      },\n      default: {},\n    }),\n    glyphMap: Object.entries(iconRegistry).reduce<{ [key: string]: number }>((acc, [name, unicode]) => {\n      acc[name] = parseInt(unicode, 16)\n      return acc\n    }, {}),\n  }\n}\n"})}),"\n",(0,t.jsx)(n.h2,{id:"vectoricon-component",children:"VectorIcon Component"}),"\n",(0,t.jsxs)(n.p,{children:["Now, it's time to create our custom ",(0,t.jsx)(n.code,{children:"VectorIcon"})," component. Take note of the available styles for our icon. These are specific to FontAwesome, and we're defining the theme here."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"export type IconStyle = keyof typeof iconFonts\ninterface VectorIconProps extends TextProps, Partial<Record<IconStyle, boolean>> {\n  name?: IconTypes\n  size?: number\n  color?: string\n  width?: string | number\n  height?: string | number\n}\n\nexport const VectorIcon: ComponentType<VectorIconProps> & {\n  font: { [x: string]: string }\n} = createMultiStyleIconSet(\n  {\n    thin: createFontAwesomeStyle('thin', '100'),\n    light: createFontAwesomeStyle('light', '300'),\n    regular: createFontAwesomeStyle('regular', '400'),\n    solid: createFontAwesomeStyle('solid', '900'),\n    brand: createFontAwesomeStyle('brand', '400'),\n  },\n  // Default font style\n  { defaultStyle: 'regular' },\n)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"preloading-our-fonts",children:"Preloading our Fonts"}),"\n",(0,t.jsxs)(n.p,{children:["Let's modify our ",(0,t.jsx)(n.code,{children:"app/app.tsx "})," to pre-load our fonts during hyrdration. You can learn more ",(0,t.jsx)(n.a,{href:"https://docs.expo.dev/guides/icons/#custom-icon-fonts",children:"here"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-patch",children:'// success-line\n+import { VectorIcon } from "./components"\n\n// error-line\n-  const [areFontsLoaded] = useFonts(customFontsToLoad)\n// success-line-start\n+  const [areFontsLoaded] = useFonts({\n+    ...customFontsToLoad,\n+    ...VectorIcon.font,\n+  })\n// success-line-end\n'})}),"\n",(0,t.jsx)(n.h2,{id:"modify-the-icon-component",children:"Modify the Icon Component"}),"\n",(0,t.jsxs)(n.p,{children:["Now that we have our ",(0,t.jsx)(n.code,{children:"VectorIcon"}),", it's time to use it within our ",(0,t.jsx)(n.code,{children:"Icon"})," component! Let's modify our ",(0,t.jsx)(n.code,{children:"IconProps"})," to include the styles extension, making it easier to set when using the component."]}),"\n",(0,t.jsxs)(n.admonition,{type:"note",children:[(0,t.jsxs)(n.p,{children:["If you only need to use a built-in icon from ",(0,t.jsx)(n.code,{children:"@expo/vector-icons"}),", simply replace ",(0,t.jsx)(n.code,{children:"VectorIcon"})," with the specific icon you need."]}),(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'import VectorIcon from "@expo/vector-icons/Ionicons"\n'})}),(0,t.jsx)(n.p,{children:"Make a few adjustments to the props here and there, and you'll be all set!"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-patch",children:"// error-line\n-interface IconProps extends TouchableOpacityProps\n// success-line\n+interface IconProps extends TouchableOpacityProps, Partial<Record<IconStyle, boolean>>\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-patch",children:"const {\n   icon,\n   color,\n   size,\n// error-line\n-    style: $imageStyleOverride,\n// success-line\n+    style: $iconStyleOverride,\n   containerStyle: $containerStyleOverride,\n// success-line-start\n+    thin,\n+    light,\n+    regular,\n+    solid,\n+    brand,\n// success-line-end\n   ...WrapperProps\n } = props\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-patch",children:'  return (\n    <Wrapper\n      accessibilityRole={isPressable ? "imagebutton" : undefined}\n      {...WrapperProps}\n      style={$containerStyleOverride}\n    >\n// error-line-start\n-      <Image\n-        style={[\n-          $imageStyle,\n-          color && { tintColor: color },\n-          size && { width: size, height: size },\n-          $imageStyleOverride,\n-        ]}\n-        source={iconRegistry[icon]}\n// error-line-end\n// success-line-start\n+      <VectorIcon\n+        name={icon}\n+        size={size}\n+        color={color}\n+        style={$iconStyleOverride}\n+        thin={thin}\n+        light={light}\n+        regular={regular}\n+        solid={solid}\n+        brand={brand}\n// success-line-end\n       />\n     </Wrapper>\n  )\n\n'})}),"\n",(0,t.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,t.jsxs)(n.p,{children:["Here's the modified ",(0,t.jsx)(n.code,{children:"app/components/Icon.tsx"}),"."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:"import * as React from \"react\"\nimport { ComponentType } from \"react\"\nimport {\n  ImageStyle,\n  StyleProp,\n  TextProps,\n  TouchableOpacity,\n  TouchableOpacityProps,\n  View,\n  ViewStyle,\n  Platform,\n} from \"react-native\"\nimport { createMultiStyleIconSet } from '@expo/vector-icons'\n\nexport type IconStyle = keyof typeof iconFonts\nexport type IconTypes = keyof typeof iconRegistry\n\n// Downloaded from our FA pro-ness pack\nconst iconFonts = {\n  thin: require('../../assets/fonts/fa-thin-100.ttf'),\n  light: require('../../assets/fonts/fa-light-300.ttf'),\n  regular: require('../../assets/fonts/fa-regular-400.ttf'),\n  solid: require('../../assets/fonts/fa-solid-900.ttf'),\n  brand: require('../../assets/fonts/fa-brands-400.ttf'),\n}\n\nconst createFontAwesomeStyle = (style: IconStyle, fontWeight: string) => {\n  const fontFile = iconFonts[style]\n  return {\n    fontFamily: `Font Awesome 6 Pro ${style}`,\n    fontFile,\n    fontStyle: Platform.select({\n      ios: {\n        fontWeight,\n      },\n      default: {},\n    }),\n    glyphMap: Object.entries(iconRegistry).reduce<{ [key: string]: number }>((acc, [name, unicode]) => {\n      acc[name] = parseInt(unicode, 16)\n      return acc\n    }, {}),\n  }\n}\n\ninterface IconProps extends TouchableOpacityProps, Partial<Record<IconStyle, boolean>> {\n  /**\n   * The name of the icon\n   */\n  icon: IconTypes\n\n  /**\n   * An optional tint color for the icon\n   */\n  color?: string\n\n  /**\n   * An optional size for the icon. If not provided, the icon will be sized to the icon's resolution.\n   */\n  size?: number\n\n  /**\n   * Style overrides for the icon image\n   */\n  style?: StyleProp<ImageStyle>\n\n  /**\n   * Style overrides for the icon container\n   */\n  containerStyle?: StyleProp<ViewStyle>\n\n  /**\n   * An optional function to be called when the icon is pressed\n   */\n  onPress?: TouchableOpacityProps[\"onPress\"]\n}\n\ninterface VectorIconProps extends TextProps, Partial<Record<IconStyle, boolean>> {\n  name?: IconTypes\n  size?: number\n  color?: string\n  width?: string | number\n  height?: string | number\n}\n\n/**\n * A component to render a registered icon.\n * It is wrapped in a <TouchableOpacity /> if `onPress` is provided, otherwise a <View />.\n *\n * - [Documentation and Examples](https://github.com/infinitered/ignite/blob/master/docs/Components-Icon.md)\n */\nexport function Icon(props: IconProps) {\n  const {\n    icon,\n    color,\n    size,\n    style: $iconStyleOverride,\n    containerStyle: $containerStyleOverride,\n    thin,\n    light,\n    regular,\n    solid,\n    brand,\n    ...WrapperProps\n  } = props\n\n  const isPressable = !!WrapperProps.onPress\n  const Wrapper: ComponentType<TouchableOpacityProps> = WrapperProps?.onPress\n    ? TouchableOpacity\n    : View\n\n  return (\n    <Wrapper\n      accessibilityRole={isPressable ? \"imagebutton\" : undefined}\n      {...WrapperProps}\n      style={$containerStyleOverride}\n    >\n      <VectorIcon\n        name={icon}\n        size={size}\n        color={color}\n        style={$iconStyleOverride}\n        thin={thin}\n        light={light}\n        regular={regular}\n        solid={solid}\n        brand={brand}\n      />\n    </Wrapper>\n  )\n}\n\nexport const iconRegistry = {\n  back: 'f060',\n  bell: 'f0f3',\n  caretLeft: 'f0d9',\n  caretRight: 'f0da',\n  check: 'f00c',\n  clap: 'e1a8',\n  community: 'f500',\n  components: 'f5fd',\n  debug: 'f120',\n  github: 'f09b',\n  heart: 'f004',\n  hidden: 'f070',\n  ladybug: 'f188',\n  lock: 'f023',\n  menu: 'f0c9',\n  more: 'f141',\n  pin: 'f3c5',\n  podcast: 'f2ce',\n  settings: 'f013',\n  slack: 'f198',\n  view: 'f06e',\n  x: 'f00d',\n}\n\nexport const VectorIcon: ComponentType<VectorIconProps> & {\n  font: { [x: string]: string }\n} = createMultiStyleIconSet(\n  {\n    thin: createFontAwesomeStyle('thin', '100'),\n    light: createFontAwesomeStyle('light', '300'),\n    regular: createFontAwesomeStyle('regular', '400'),\n    solid: createFontAwesomeStyle('solid', '900'),\n    brand: createFontAwesomeStyle('brand', '400'),\n  },\n  // Default font style\n  { defaultStyle: 'regular' },\n)\n"})}),"\n",(0,t.jsx)(n.p,{children:"That's all there is to it! We only added the optional styles prop so if you're using Ignite, things should work."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<Icon solid icon="community" color={colors.tint} size={24} />\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-tsx",children:'<Icon light icon="check" color={colors.tint} size={24} />\n'})}),"\n",(0,t.jsx)(n.h3,{id:"pro-tip",children:"Pro tip"}),"\n",(0,t.jsxs)(n.p,{children:["It is recommend to put the config under ",(0,t.jsx)(n.code,{children:"app/themes/icons.ts"})," to keep things organized."]})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},2172:(e,n,o)=>{o.d(n,{I:()=>c,M:()=>i});var t=o(1504);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);