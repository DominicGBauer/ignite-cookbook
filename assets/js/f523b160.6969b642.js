"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[3504],{8848:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var s=t(7624),i=t(4552);const r={title:"Creating a Good Experience for Screen Readers",description:"Learn how to improve the experience of screen readers using your app!",tags:["Accessibility","iOS","Android"],last_update:{author:"Lizzi Lindboe"},publish_date:new Date("2022-10-09T00:00:00.000Z")},o=void 0,a={id:"recipes/CreatingGreateExperienceForScreenReaders",title:"Creating a Good Experience for Screen Readers",description:"Learn how to improve the experience of screen readers using your app!",source:"@site/docs/recipes/CreatingGreateExperienceForScreenReaders.md",sourceDirName:"recipes",slug:"/recipes/CreatingGreateExperienceForScreenReaders",permalink:"/docs/recipes/CreatingGreateExperienceForScreenReaders",draft:!1,unlisted:!1,tags:[{label:"Accessibility",permalink:"/docs/tags/accessibility"},{label:"iOS",permalink:"/docs/tags/i-os"},{label:"Android",permalink:"/docs/tags/android"}],version:"current",lastUpdatedBy:"Lizzi Lindboe",lastUpdatedAt:1674164388,formattedLastUpdatedAt:"Jan 19, 2023",frontMatter:{title:"Creating a Good Experience for Screen Readers",description:"Learn how to improve the experience of screen readers using your app!",tags:["Accessibility","iOS","Android"],last_update:{author:"Lizzi Lindboe"},publish_date:"2022-10-09T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"CircleCI CD Setup - React Native",permalink:"/docs/recipes/CircleCIRNSetup"},next:{title:"Detox Intro",permalink:"/docs/recipes/DetoxIntro"}},c={},l=[{value:"UI Patterns",id:"ui-patterns",level:2},{value:"Screens",id:"screens",level:3},{value:"Common patterns that require more work to add good UX for screen readers",id:"common-patterns-that-require-more-work-to-add-good-ux-for-screen-readers",level:3},{value:"RN-specific issues",id:"rn-specific-issues",level:3},{value:"Labeling",id:"labeling",level:2}];function d(e){const n={a:"a",blockquote:"blockquote",h2:"h2",h3:"h3",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.M)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"ui-patterns",children:"UI Patterns"}),"\n",(0,s.jsx)(n.h3,{id:"screens",children:"Screens"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Titles"}),"\nAll screen should ideally have unique titles, to make it easier to know quickly which screen you're on ",(0,s.jsx)(n.a,{href:"https://www.a11yportal.com/guidelines/design/structure.html#unique-page-screen-titles",children:"source"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Headings"}),'\nApps should ideally mark headings to allow for quick "scanning" of the structure of screens (',(0,s.jsx)(n.a,{href:"https://www.a11yportal.com/guidelines/design/structure.html#headings",children:"source"}),'). In React Native, mark headings with the "header" accessibility role.']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Try to group controls as much as possible"}),"\n(",(0,s.jsx)(n.a,{href:"https://www.a11yportal.com/guidelines/design/structure.html#grouped-elements",children:"source"}),")"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["It is easier and quicker for people using a keyboard or screen reader to interact with content when not overwhelmed and confused by extraneous elements. Grouping elements into a single overall control makes things clearer, simplifies interactions, and can provide larger touch targets.\nFor example, a control such as a custom item selector may be made up of smaller interface elements, but will be easier to use if conveyed as a single control. Another common example is\xa0",(0,s.jsx)(n.a,{href:"https://www.a11yportal.com/guidelines/design/links.html#combining-repeated-links",children:"grouping adjacent links"}),"\xa0to the same resource."]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"common-patterns-that-require-more-work-to-add-good-ux-for-screen-readers",children:"Common patterns that require more work to add good UX for screen readers"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Infinite Scroll"}),"\nInfinite scroll causes two main problems for screen readers: 1) there's no clear \"end\" to jump to, and 2) elements pop in, which need to be announced if there weren't there when the end was reached."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Toast, Dialog, or Modal"}),'\nDepending on the implementation used, these elements may not "announce" when they pop in. Evaluate solution for this before going with a library.']}),"\n",(0,s.jsx)(n.h3,{id:"rn-specific-issues",children:"RN-specific issues"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Test links nested in text with formatting"}),"\nText links nested in other text elements aren't accessible. If you need to implement that design, there are a few options:"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Wrap the parent text in a View and add custom ",(0,s.jsx)(n.a,{href:"https://reactnative.dev/docs/accessibility#accessibility-actions",children:"accessibilityActions"})," for opening the links","\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Do not apply custom accessibilityActions to text, those will cause a crash on iOS"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Re-structure the component based on whether a screen reader is turned on (as in this ",(0,s.jsx)(n.a,{href:"https://callstack.com/blog/react-native-android-accessibility-tips/",children:"blog post"}),")"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"labeling",children:"Labeling"}),"\n",(0,s.jsx)(n.p,{children:"A good accessibility label for an element is concise, but also unique and makes sense even when the screen is not read linearly. This is because one way to navigate with a screen reader is to search for a label. Another is to jump between controls (e.g., links, buttons, form fields), so if a header preceding a link is the only way to understand the link, it won't make sense in this navigation method."}),"\n",(0,s.jsxs)(n.p,{children:["See this post for some great advice on when and how to use labels: ",(0,s.jsx)(n.a,{href:"https://mobilea11y.com/blog/when-to-use-accessibility-labels",children:"https://mobilea11y.com/blog/when-to-use-accessibility-labels"})]})]})}function h(e={}){const{wrapper:n}={...(0,i.M)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>o});var s=t(1504);const i={},r=s.createContext(i);function o(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);