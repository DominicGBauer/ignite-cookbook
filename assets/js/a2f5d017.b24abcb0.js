"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[9524],{4137:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),l=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(r),m=o,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||a;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var l=2;l<a;l++)i[l]=r[l];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},2085:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var n=r(7462),o=(r(7294),r(4137));const a={title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-01-16T00:00:00.000Z")},i="Redux",s={unversionedId:"recipes/Redux",id:"recipes/Redux",title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",source:"@site/docs/recipes/Redux.md",sourceDirName:"recipes",slug:"/recipes/Redux",permalink:"/docs/recipes/Redux",draft:!1,tags:[{label:"Redux",permalink:"/docs/tags/redux"},{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1707844850,formattedLastUpdatedAt:"Feb 13, 2024",frontMatter:{title:"Redux",description:"How to migrate a MobX-State-Tree project to Redux",tags:["Redux","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-01-16T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"React Native Vision Camera",permalink:"/docs/recipes/ReactNativeVisionCamera"},next:{title:"Remove MobX-State-Tree",permalink:"/docs/recipes/RemoveMobxStateTree"}},p={},l=[{value:"Remove MobX-State-Tree",id:"remove-mobx-state-tree",level:2},{value:"Add Redux",id:"add-redux",level:2},{value:"Install dependencies",id:"install-dependencies",level:4},{value:"Create Store",id:"create-store",level:4},{value:"Add State",id:"add-state",level:4},{value:"Add Redux Provider",id:"add-redux-provider",level:4},{value:"Hook up Components",id:"hook-up-components",level:4},{value:"Persistence",id:"persistence",level:2},{value:"Reactotron Support",id:"reactotron-support",level:2}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"redux"},"Redux"),(0,o.kt)("p",null,"This guide will show you how to migrate a MobX-State-Tree project (Ignite's default) to Redux, using a newly created Ignite project as our example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-terminal"},"npx ignite-cli new ReduxApp --yes --removeDemo\n")),(0,o.kt)("p",null,"If you are migrating an existing project these steps still apply, but you may need to migrate your existing state tree and other additional functionality."),(0,o.kt)("h2",{id:"remove-mobx-state-tree"},"Remove MobX-State-Tree"),(0,o.kt)("p",null,"First, follow our recipe to ",(0,o.kt)("a",{parentName:"p",href:"/docs/recipes/RemoveMobxStateTree"},"Remove MobX-State-Tree")," from your project. This will give you a blank slate to setup Redux."),(0,o.kt)("h2",{id:"add-redux"},"Add Redux"),(0,o.kt)("h4",{id:"install-dependencies"},"Install dependencies"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://redux.js.org/introduction/getting-started#redux-toolkit"},"redux-tooklit is the current recommended approach"),", and you'll also need ",(0,o.kt)("inlineCode",{parentName:"p"},"react-redux")," bindings for your React Native app."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @reduxjs/toolkit\nyarn add react-redux\n")),(0,o.kt)("h4",{id:"create-store"},"Create Store"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In a new file ",(0,o.kt)("inlineCode",{parentName:"li"},"app/store/store.ts"),", create your Redux store.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Create an initial store. We're using ",(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/usage/usage-guide#simplifying-store-setup-with-configurestore"},"Redux Toolkit's ",(0,o.kt)("inlineCode",{parentName:"a"},"configureStore"))," here for simplicity."),(0,o.kt)("li",{parentName:"ul"},"Export Typescript helpers for the rest of your app to stay type safe."),(0,o.kt)("li",{parentName:"ul"},"We'll use ",(0,o.kt)("inlineCode",{parentName:"li"},"app/store")," directory for all our Redux reducers and store, but feel free to use any directory structure you like. Another popular option is to use ",(0,o.kt)("a",{parentName:"li",href:"https://redux.js.org/faq/code-structure"},"feature folders"),".")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/store/store.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { configureStore } from "@reduxjs/toolkit";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport counterReducer from "./counterSlice";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    // add other state here\n  },\n});\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n')),(0,o.kt)("h4",{id:"add-state"},"Add State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add your state reducers or ",(0,o.kt)("a",{parentName:"li",href:"https://redux-toolkit.js.org/usage/usage-guide#creating-slices-of-state"},"slices"),". We'll create a simple ",(0,o.kt)("inlineCode",{parentName:"li"},"counter")," slice for this example."),(0,o.kt)("li",{parentName:"ul"},"If you have an existing state tree with MobX-State-Tree, you'll need to convert your tree into a series of Redux reducers.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Note: Redux does not define or validate your models like MobX-State-Tree does. It is up to you to ensure the correct data is being set in your reducers.")))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/store/counterSlice.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { createSlice } from "@reduxjs/toolkit";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: "counter",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n  },\n});\n\nexport const { increment, decrement } = counterSlice.actions;\nexport default counterSlice.reducer;\n')),(0,o.kt)("h4",{id:"add-redux-provider"},"Add Redux Provider"),(0,o.kt)("p",null,"In ",(0,o.kt)("inlineCode",{parentName:"p"},"app.tsx"),", wrap your ",(0,o.kt)("inlineCode",{parentName:"p"},"AppNavigator")," with the react-redux Provider component"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/app.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'import { Provider } from "react-redux";\nimport { store } from "./store/store";\n\n...\n\n<Provider store={store}>\n  <AppNavigator\n    linking={linking}\n    initialState={initialNavigationState}\n    onStateChange={onNavigationStateChange}\n  />\n</Provider>\n')),(0,o.kt)("h4",{id:"hook-up-components"},"Hook up Components"),(0,o.kt)("p",null,"You can now use selectors to grab data and ",(0,o.kt)("inlineCode",{parentName:"p"},"dispatch()")," to execute actions within your components. Here's an example:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remember to use our exported ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppSelector")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"useAppDispatch")," helpers for type safety")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/screens/WelcomeScreen.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import React, { FC } from "react";\nimport { View, ViewStyle } from "react-native";\nimport { Button, Text } from "app/components";\nimport { AppStackScreenProps } from "../navigators";\nimport { colors } from "../theme";\nimport { useSafeAreaInsetsStyle } from "../utils/useSafeAreaInsetsStyle";\nimport { useAppDispatch, useAppSelector } from "app/store/store";\nimport { decrement, increment } from "app/store/counterSlice";\n\ninterface WelcomeScreenProps extends AppStackScreenProps<"Welcome"> {}\n\nexport const WelcomeScreen: FC<WelcomeScreenProps> = () => {\n  const $containerInsets = useSafeAreaInsetsStyle(["top", "bottom"]);\n  const count = useAppSelector((state) => state.counter.value);\n  const dispatch = useAppDispatch();\n  return (\n    <View style={[$containerInsets, $container]}>\n      <Button text="Increment" onPress={() => dispatch(increment())} />\n      <Button text="Decrement" onPress={() => dispatch(decrement())} />\n      <Text text={`Count: ${count}`} />\n    </View>\n  );\n};\n\nconst $container: ViewStyle = {\n  flex: 1,\n  backgroundColor: colors.background,\n};\n')),(0,o.kt)("p",null,"You're now using Redux!"),(0,o.kt)("h2",{id:"persistence"},"Persistence"),(0,o.kt)("p",null,"Ignite ships with built-in persistence support for MobX-State-Tree. We can add similar support for Redux by:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Install ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/rt2zz/redux-persist"},(0,o.kt)("inlineCode",{parentName:"a"},"redux-persist")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"yarn add redux-persist\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Modify ",(0,o.kt)("inlineCode",{parentName:"li"},"store.ts")," to include ",(0,o.kt)("inlineCode",{parentName:"li"},"redux-persist"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/store/store.ts"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'import { combineReducers, configureStore } from "@reduxjs/toolkit";\nimport counterReducer from "./counterSlice";\nimport { TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";\nimport { persistStore, persistReducer, FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER } from "redux-persist";\nimport AsyncStorage from "@react-native-async-storage/async-storage";\n\nconst persistConfig = {\n  key: "root",\n  version: 1,\n  storage: AsyncStorage,\n};\n\nconst rootReducer = combineReducers({\n  counter: counterReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: {\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n      },\n    }),\n});\n\nexport const persistor = persistStore(store);\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n\n// Use throughout app instead of plain `useDispatch` and `useSelector` for type safety\ntype DispatchFunc = () => AppDispatch;\nexport const useAppDispatch: DispatchFunc = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Add a ",(0,o.kt)("inlineCode",{parentName:"li"},"PersistGate")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"app.tsx")," and replace any existing ",(0,o.kt)("inlineCode",{parentName:"li"},"hideSplashScreen")," calls with the ",(0,o.kt)("inlineCode",{parentName:"li"},"onBeforeLift")," callback")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("inlineCode",{parentName:"strong"},"app/app.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},'...\n\nimport { persistor, store } from "./store/store"\nimport { PersistGate } from "redux-persist/integration/react"\n\n...\n\nfunction App(props: AppProps) {\n  const { hideSplashScreen } = props\n...\n  const onBeforeLiftPersistGate = () => {\n    // If your initialization scripts run very fast, it\'s good to show the splash screen for just a bit longer to prevent flicker.\n    // Slightly delaying splash screen hiding for better UX; can be customized or removed as needed,\n    // Note: (vanilla Android) The splash-screen will not appear if you launch your app via the terminal or Android Studio. Kill the app and launch it normally by tapping on the launcher icon. https://stackoverflow.com/a/69831106\n    // Note: (vanilla iOS) You might notice the splash-screen logo change size. This happens in debug/development mode. Try building the app for release.\n    setTimeout(hideSplashScreen, 500)\n  }\n...\n  return (\n    <SafeAreaProvider initialMetrics={initialWindowMetrics}>\n      <ErrorBoundary catchErrors={Config.catchErrors}>\n        <GestureHandlerRootView style={$container}>\n          <Provider store={store}>\n            <PersistGate\n              loading={null}\n              onBeforeLift={onBeforeLiftPersistGate}\n              persistor={persistor}\n            >\n              <AppNavigator\n                linking={linking}\n                initialState={initialNavigationState}\n                onStateChange={onNavigationStateChange}\n              />\n            </PersistGate>\n          </Provider>\n        </GestureHandlerRootView>\n      </ErrorBoundary>\n    </SafeAreaProvider>\n  )\n}\n\nexport default App\n')),(0,o.kt)("p",null,"Your Redux state should now be persisted using AsyncStorage!"),(0,o.kt)("h2",{id:"reactotron-support"},"Reactotron Support"),(0,o.kt)("p",null,"Reactotron has a prebuilt plugin for Redux!"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.infinite.red/reactotron/plugins/redux/"},"Follow the instructions to install")))}u.isMDXComponent=!0}}]);