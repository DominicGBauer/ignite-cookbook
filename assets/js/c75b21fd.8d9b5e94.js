"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[1412],{4540:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>i,toc:()=>l});var o=t(7624),s=t(4552);const r={title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",tags:["MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-02-05T00:00:00.000Z")},a="Remove Mobx-State-Tree",i={id:"recipes/RemoveMobxStateTree",title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",source:"@site/docs/recipes/RemoveMobxStateTree.md",sourceDirName:"recipes",slug:"/recipes/RemoveMobxStateTree",permalink:"/docs/recipes/RemoveMobxStateTree",draft:!1,unlisted:!1,tags:[{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1708554035,formattedLastUpdatedAt:"Feb 21, 2024",frontMatter:{title:"Remove MobX-State-Tree",description:"How to remove MobX-State-Tree from an Ignite project",tags:["MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-02-05T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Redux",permalink:"/docs/recipes/Redux"},next:{title:"Requiring Hardware Features with Expo",permalink:"/docs/recipes/RequiringHardwareFeaturesWithExpo"}},c={},l=[{value:"Steps",id:"steps",level:2},{value:"Conclusion",id:"conclusion",level:2}];function d(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.M)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"remove-mobx-state-tree",children:"Remove Mobx-State-Tree"}),"\n",(0,o.jsxs)(n.p,{children:["By default, Ignite uses ",(0,o.jsx)(n.a,{href:"https://mobx-state-tree.js.org/",children:"MobX-State-Tree"})," as the default state management solution. While we love ",(0,o.jsx)(n.a,{href:"https://docs.infinite.red/ignite-cli/concept/MobX-State-Tree/",children:"MobX-State-Tree at Infinite Red"}),", we understand the landscape is rich with great alternatives that you may want to use instead."]}),"\n",(0,o.jsx)(n.p,{children:'This guide will show you how to remove Mobx-State-Tree from an Ignite-generated project and get to a "blank slate" with no state management at all.'}),"\n",(0,o.jsx)(n.h2,{id:"steps",children:"Steps"}),"\n",(0,o.jsxs)(n.ol,{children:["\n",(0,o.jsx)(n.li,{children:"Let's start by removing all MobX-related dependencies"}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"yarn remove mobx mobx-react-lite mobx-state-tree reactotron-mst\n"})}),"\n",(0,o.jsxs)(n.ol,{start:"2",children:["\n",(0,o.jsxs)(n.li,{children:["Ignite places all MobX-State-Tree models in the ",(0,o.jsx)(n.code,{children:"models/"}),". Remove this entire directory and all files within it, these are not needed anymore."]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rm -rf ./app/models\n"})}),"\n",(0,o.jsx)(n.admonition,{type:"note",children:(0,o.jsx)(n.p,{children:"If you are migrating a project with several existing models, you may want to keep a copy of these around for reference as you migrate to your new system."})}),"\n",(0,o.jsxs)(n.ol,{start:"3",children:["\n",(0,o.jsxs)(n.li,{children:["Remove the ",(0,o.jsx)(n.code,{children:"reactotron-mst"})," plugin from Reactotron's config"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"devtools/ReactotronConfig.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import { mst } from "reactotron-mst"\n\n...\n\nconst reactotron = Reactotron.configure({\n  name: require("../../package.json").name,\n  onConnect: () => {\n    /** since this file gets hot reloaded, let\'s clear the past logs every time we connect */\n    Reactotron.clear()\n  },\n--}).use(\n--  mst({\n--    /** ignore some chatty `mobx-state-tree` actions  */\n--    filter: (event) => /postProcessSnapshot|@APPLY_SNAPSHOT/.test(event.name) === false,\n--  }),\n--)\n++})\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"4",children:["\n",(0,o.jsxs)(n.li,{children:["Remove ",(0,o.jsx)(n.code,{children:"observer()"})," wrapped components and reformat as functional React components"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Do a project-wide search for ",(0,o.jsx)(n.code,{children:"observer("})," and replace each component instance with the following pattern:"]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"app/screens/WelcomeScreen.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import { observer } from "mobx-react-lite"\n\n--export const WelcomeScreen: FC<WelcomeScreenProps> = observer(function WelcomeScreen(props) {\n++export const WelcomeScreen: FC<WelcomeScreenProps> = (props) => {\n    ...\n--})\n++}\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"5",children:["\n",(0,o.jsxs)(n.li,{children:["Remove ",(0,o.jsx)(n.code,{children:"useStores()"})," from components"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Do a project-wide search for ",(0,o.jsx)(n.code,{children:"useStores"})," and remove each instance."]}),"\n",(0,o.jsxs)(n.li,{children:["If you're converting to a different state management solution, you'll need to swap the data we get from ",(0,o.jsx)(n.code,{children:"useStores"})," to your new solution. Or you can swap in temporary hardcoded values to prevent crashes while you migrate. (just don't forget about it!)"]}),"\n"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import { useStores } from "../models"\n\nconst AppStack = () => {\n--  const { authenticationStore: { isAuthenticated } } = useStores()\n++  const isAuthenticated = false // TODO: TEMPORARY VALUE - replace with alternative state management solution\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"6",children:["\n",(0,o.jsxs)(n.li,{children:["Update the ",(0,o.jsx)(n.a,{href:"https://docs.infinite.red/ignite-cli/concept/Generator-Templates/",children:"Ignite Generator Templates"}),"!"]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Follow the same pattern to replace ",(0,o.jsx)(n.code,{children:"observer()"}),". This will allow you to quickly generate screens and components via ",(0,o.jsx)(n.code,{children:"npx ignite-cli generate screen NewScreen"})," and ",(0,o.jsx)(n.code,{children:"npx ignite-cli generate component NewComponent"})," and use your updated syntax."]}),"\n",(0,o.jsx)(n.li,{children:"I also recommend customizing these however else you prefer!"}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"ignite/templates/component/NAME.tsx.ejs"}),(0,o.jsx)(n.br,{}),"\n",(0,o.jsx)(n.strong,{children:"ignite/templates/screen/NAMEScreen.tsx.ejs"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import { observer } from "mobx-react-lite"\n\n--export const <%= props.pascalCaseName %> = observer(function <%= props.pascalCaseName %>(props: <%= props.pascalCaseName %>Props) {\n++export const <%= props.pascalCaseName %> = (props: <%= props.pascalCaseName %>Props) => {\n    ...\n--})\n++}\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"7",children:["\n",(0,o.jsxs)(n.li,{children:["Remove old MobX-State-Tree store initialization & hydration code in ",(0,o.jsx)(n.code,{children:"app.tsx"}),"."]}),"\n"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["We still need to call ",(0,o.jsx)(n.code,{children:"hideSplashScreen"})," in a ",(0,o.jsx)(n.code,{children:"useEffect"})," so the app loads without needing to hydrate a store first."]}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"app/app.tsx"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import { useInitialRootStore } from "./models"\n\n--const { rehydrated } = useInitialRootStore(() => {\n--setTimeout(hideSplashScreen, 500)\n--})\n++React.useEffect(() => {\n++    setTimeout(hideSplashScreen, 500)\n++}, [])\n\n--if (!rehydrated || !isNavigationStateRestored || !areFontsLoaded) return null\n++if (!isNavigationStateRestored || !areFontsLoaded) return null\n'})}),"\n",(0,o.jsxs)(n.ol,{start:"8",children:["\n",(0,o.jsxs)(n.li,{children:["Remove any remaining ",(0,o.jsx)(n.code,{children:"/models"})," imports"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Your app might have a few remaining references to replace. In the Ignite Demo App, we need to replace the ",(0,o.jsx)(n.code,{children:"EpisodeSnapshotIn"})," type which was previously derived from the MST model. Instead, we'll use ",(0,o.jsx)(n.code,{children:"EpisodeItem"})," from our API types."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:"app/services/api/api.ts"})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-diff",children:'--import type { ApiConfig, ApiFeedResponse } from "./api.types"\n--import type { EpisodeSnapshotIn } from "../../models/Episode"\n++import type { ApiConfig, ApiFeedResponse, EpisodeItem } from "./api.types"\n\n\n--async getEpisodes(): Promise<{ kind: "ok"; episodes: EpisodeSnapshotIn[] } | GeneralApiProblem> {\n++async getEpisodes(): Promise<{ kind: "ok"; episodes: EpisodeItem[] } | GeneralApiProblem> {\n// make the api call\n\n--// This is where we transform the data into the shape we expect for our MST model.\n--const episodes: EpisodeSnapshotIn[] =\n--  rawData?.items.map((raw) => ({\n--    ...raw,\n--  })) ?? []\n++const episodes = rawData?.items ?? []\n'})}),"\n",(0,o.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,o.jsx)(n.p,{children:'You should be able to build and run your app! It won\'t have any data...but you now have a "blank slate" to setup your state management solution of choice.'}),"\n",(0,o.jsx)(n.p,{children:"For next steps, we have recipes for migrating to"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/recipes/Redux",children:"Redux"})}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.a,{href:"/docs/recipes/Zustand",children:"Zustand"})}),"\n",(0,o.jsx)(n.li,{children:"Or you can roll your own!"}),"\n"]})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},4552:(e,n,t)=>{t.d(n,{I:()=>i,M:()=>a});var o=t(1504);const s={},r=o.createContext(s);function a(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);