"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[8],{4852:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>d,metadata:()=>t,toc:()=>c});var a=n(7624),i=n(4552);const d={title:"Requiring Hardware Features with Expo",description:"How to specify hardware requirements for your app",tags:["Hardware","UIRequiredDeviceCapabilities","uses-feature","prebuild","cng"],last_update:{author:"Mark Rickert"},publish_date:new Date("2024-02-28T00:00:00.000Z")},o="Requiring Hardware Features with Expo",t={id:"recipes/RequiringHardwareFeaturesWithExpo",title:"Requiring Hardware Features with Expo",description:"How to specify hardware requirements for your app",source:"@site/docs/recipes/RequiringHardwareFeaturesWithExpo.md",sourceDirName:"recipes",slug:"/recipes/RequiringHardwareFeaturesWithExpo",permalink:"/docs/recipes/RequiringHardwareFeaturesWithExpo",draft:!1,unlisted:!1,tags:[{label:"Hardware",permalink:"/docs/tags/hardware"},{label:"UIRequiredDeviceCapabilities",permalink:"/docs/tags/ui-required-device-capabilities"},{label:"uses-feature",permalink:"/docs/tags/uses-feature"},{label:"prebuild",permalink:"/docs/tags/prebuild"},{label:"cng",permalink:"/docs/tags/cng"}],version:"current",lastUpdatedBy:"Mark Rickert",lastUpdatedAt:1709166386,formattedLastUpdatedAt:"Feb 29, 2024",frontMatter:{title:"Requiring Hardware Features with Expo",description:"How to specify hardware requirements for your app",tags:["Hardware","UIRequiredDeviceCapabilities","uses-feature","prebuild","cng"],last_update:{author:"Mark Rickert"},publish_date:"2024-02-28T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Remove MobX-State-Tree",permalink:"/docs/recipes/RemoveMobxStateTree"},next:{title:"Sample YAML for CircleCi for Ignite",permalink:"/docs/recipes/SampleYAMLCircleCI"}},s={},c=[{value:"Overview",id:"overview",level:2},{value:"Add the plugin file",id:"add-the-plugin-file",level:2},{value:"Enable the plugin",id:"enable-the-plugin",level:2},{value:"Check that your install worked",id:"check-that-your-install-worked",level:2},{value:"For iOS:",id:"for-ios",level:3},{value:"For Android:",id:"for-android",level:3}];function l(e){const r={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",...(0,i.M)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{id:"requiring-hardware-features-with-expo",children:"Requiring Hardware Features with Expo"}),"\n",(0,a.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,a.jsx)(r.p,{children:"iOS and Android allow you to specify specific hardware that your app needs in order to be able to run. When users go to download your app from the respective app stores, if their device doesn't meet this hardware requirement, the store will not allow the user to download the app to that device."}),"\n",(0,a.jsx)(r.p,{children:"For this recipe, we're going to be creating an expo config plugin to add the required properties to our app's prebuild system so that users with devices that DO NOT have a front-facing camera or a microphone won't be able to download our app."}),"\n",(0,a.jsxs)(r.p,{children:["We'll get started by igniting a new application with the ",(0,a.jsx)(r.code,{children:"cng"})," workflow."]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-bash",children:"npx ignite-cli new PizzaApp --workflow=cng --yes\ncd PizzaApp\n"})}),"\n",(0,a.jsx)(r.h2,{id:"add-the-plugin-file",children:"Add the plugin file"}),"\n",(0,a.jsxs)(r.p,{children:["Create a new file called ",(0,a.jsx)(r.code,{children:"plugins/withRequiredHardware.ts"})," and put the following content in it."]}),"\n",(0,a.jsx)(r.p,{children:"You can see that we've defined every possible value for iOS and Android."}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-tsx",children:'import {\n  withInfoPlist,\n  withAndroidManifest,\n  type ConfigPlugin,\n  type AndroidConfig,\n  type IOSConfig,\n} from "@expo/config-plugins"\n\n// More info: https://developer.apple.com/documentation/bundleresources/information_property_list/uirequireddevicecapabilities/\nconst validAndroidFeatures = [\n  "android.hardware.audio.low_latency",\n  "android.hardware.audio.output",\n  "android.hardware.audio.pro",\n  "android.hardware.bluetooth",\n  "android.hardware.bluetooth_le",\n  "android.hardware.camera",\n  "android.hardware.camera.any",\n  "android.hardware.camera.autofocus",\n  "android.hardware.camera.capability.manual_post_processing",\n  "android.hardware.camera.capability.manual_sensor",\n  "android.hardware.camera.capability.raw",\n  "android.hardware.camera.external",\n  "android.hardware.camera.flash",\n  "android.hardware.camera.front",\n  "android.hardware.camera.level.full",\n  "android.hardware.consumerir",\n  "android.hardware.faketouch",\n  "android.hardware.faketouch.multitouch.distinct",\n  "android.hardware.faketouch.multitouch.jazzhand",\n  "android.hardware.fingerprint",\n  "android.hardware.gamepad",\n  "android.hardware.location",\n  "android.hardware.location.gps",\n  "android.hardware.location.network",\n  "android.hardware.microphone",\n  "android.hardware.nfc",\n  "android.hardware.nfc.hce",\n  "android.hardware.opengles.aep",\n  "android.hardware.screen.landscape",\n  "android.hardware.screen.portrait",\n  "android.hardware.sensor.accelerometer",\n  "android.hardware.sensor.ambient_temperature",\n  "android.hardware.sensor.barometer",\n  "android.hardware.sensor.compass",\n  "android.hardware.sensor.gyroscope",\n  "android.hardware.sensor.heartrate",\n  "android.hardware.sensor.heartrate.ecg",\n  "android.hardware.sensor.hifi_sensors",\n  "android.hardware.sensor.light",\n  "android.hardware.sensor.proximity",\n  "android.hardware.sensor.relative_humidity",\n  "android.hardware.sensor.stepcounter",\n  "android.hardware.sensor.stepdetector",\n  "android.hardware.telephony",\n  "android.hardware.telephony.cdma",\n  "android.hardware.telephony.gsm",\n  "android.hardware.touchscreen",\n  "android.hardware.touchscreen.multitouch",\n  "android.hardware.touchscreen.multitouch.distinct",\n  "android.hardware.touchscreen.multitouch.jazzhand",\n  "android.hardware.type.automotive",\n  "android.hardware.type.pc",\n  "android.hardware.type.television",\n  "android.hardware.type.watch",\n  "android.hardware.usb.accessory",\n  "android.hardware.usb.host",\n  "android.hardware.vulkan.compute",\n  "android.hardware.vulkan.level",\n  "android.hardware.vulkan.version",\n  "android.hardware.wifi",\n  "android.hardware.wifi.direct",\n] as const\n\n// More info: https://developer.android.com/guide/topics/manifest/uses-feature-element\nconst validIOSFeatures = [\n  "accelerometer",\n  "arkit",\n  "arm64",\n  "armv7",\n  "auto-focus-camera",\n  "bluetooth-le",\n  "camera-flash",\n  "driverkit",\n  "front-facing-camera",\n  "gamekit",\n  "gps",\n  "gyroscope",\n  "healthkit",\n  "iphone-ipad-minimum-performance-a12",\n  "iphone-performance-gaming-tier",\n  "location-services",\n  "magnetometer",\n  "metal",\n  "microphone",\n  "nfc",\n  "opengles-1",\n  "opengles-2",\n  "opengles-3",\n  "peer-peer",\n  "sms",\n  "still-camera",\n  "telephony",\n  "video-camera",\n  "wifi",\n] as const\n\ntype HardwareFeatureAndroid = (typeof validAndroidFeatures)[number]\ntype HardwareFeatureIOS = (typeof validIOSFeatures)[number]\n\nexport const withRequiredHardware: ConfigPlugin<{\n  ios: Array<HardwareFeatureIOS>\n  android: Array<HardwareFeatureAndroid>\n}> = (config, { android, ios }) => {\n  // Add android required hardware\n  config = withAndroidManifest(config, (config) => {\n    config.modResults = addHardwareFeaturesToAndroidManifestManifest(config.modResults, android)\n    return config\n  })\n\n  // Add ios required hardware\n  config = withInfoPlist(config, (config) => {\n    config.modResults = addRequiredDeviceCapabilitiesToInfoPlist(config.modResults, ios)\n    return config\n  })\n\n  return config\n}\n\nexport function addHardwareFeaturesToAndroidManifestManifest(\n  androidManifest: AndroidConfig.Manifest.AndroidManifest,\n  requiredFeatures: Array<HardwareFeatureAndroid>,\n) {\n  // Add `<uses-feature android:name="android.hardware.camera.front" android:required="true"/>` to the AndroidManifest.xml\n  if (!Array.isArray(androidManifest.manifest["uses-feature"])) {\n    androidManifest.manifest["uses-feature"] = []\n  }\n\n  // Here we add the feature to the manifest:\n  // loop through the array of features and add them to the manifest if they don\'t exist\n  for (const feature of requiredFeatures) {\n    if (\n      !androidManifest.manifest["uses-feature"].find((item) => item.$["android:name"] === feature)\n    ) {\n      androidManifest.manifest["uses-feature"]?.push({\n        $: {\n          "android:name": feature,\n          "android:required": "true",\n        },\n      })\n    }\n  }\n\n  return androidManifest\n}\n\nexport function addRequiredDeviceCapabilitiesToInfoPlist(\n  infoPlist: IOSConfig.InfoPlist,\n  requiredFeatures: Array<HardwareFeatureIOS>,\n) {\n  if (!infoPlist.UIRequiredDeviceCapabilities) {\n    infoPlist.UIRequiredDeviceCapabilities = []\n  }\n  const existingFeatures = infoPlist.UIRequiredDeviceCapabilities as Array<HardwareFeatureIOS>\n  for (const f of requiredFeatures) {\n    if (!existingFeatures.includes(f)) {\n      existingFeatures.push(f)\n    }\n  }\n\n  infoPlist.UIRequiredDeviceCapabilities = existingFeatures\n  return infoPlist\n}\n'})}),"\n",(0,a.jsx)(r.h2,{id:"enable-the-plugin",children:"Enable the plugin"}),"\n",(0,a.jsxs)(r.p,{children:["To enable the new plugin, open the ",(0,a.jsx)(r.code,{children:"app.config.ts"})," file and where you see ",(0,a.jsx)(r.code,{children:"plugins:"})," add the new plugin:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-tsx",children:'  return {\n    ...config,\n    plugins: [\n      ...existingPlugins,\n      require("./plugins/withSplashScreen").withSplashScreen,\n      require("./plugins/withFlipperDisabled").withFlipperDisabled,\n      // success-line-start\n      [\n        require("./plugins/withRequiredHardware").withRequiredHardware,\n        {\n          // More info: https://developer.apple.com/documentation/bundleresources/information_property_list/uirequireddevicecapabilities/\n          ios: ["front-facing-camera", "microphone"],\n          // More info: https://developer.android.com/guide/topics/manifest/uses-feature-element\n          android: ["android.hardware.camera.front", "android.hardware.microphone"],\n        },\n      ],\n      // success-line-end\n    ],\n  }\n'})}),"\n",(0,a.jsx)(r.admonition,{type:"warning",children:(0,a.jsx)(r.p,{children:"Note that this plugin is an array. The first element of the array is the plugin and the second is an object representing the required hardware you want for both iOS and Android."})}),"\n",(0,a.jsx)(r.h2,{id:"check-that-your-install-worked",children:"Check that your install worked"}),"\n",(0,a.jsxs)(r.p,{children:["Now run ",(0,a.jsx)(r.code,{children:"yarn prebuild:clean"})," and then check that the following files have the changes yous specified in the plugin configuration:"]}),"\n",(0,a.jsx)(r.h3,{id:"for-ios",children:"For iOS:"}),"\n",(0,a.jsxs)(r.p,{children:["In ",(0,a.jsx)(r.code,{children:"./ios/[ProjectName]/Info.plist"}),":"]}),"\n",(0,a.jsxs)(r.p,{children:["You should see new entries in the ",(0,a.jsx)(r.code,{children:"UIRequiredDeviceCapabilities"})," array:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:"<key>UIRequiredDeviceCapabilities</key>\n<array>\n  <string>armv7</string>\n  // success-line-start\n  <string>front-facing-camera</string>\n  <string>microphone</string>\n  // success-line-end\n</array>\n"})}),"\n",(0,a.jsx)(r.h3,{id:"for-android",children:"For Android:"}),"\n",(0,a.jsxs)(r.p,{children:["In ",(0,a.jsx)(r.code,{children:"./android/app/src/main/AndroidManifest.xml"})]}),"\n",(0,a.jsxs)(r.p,{children:["You should see new ",(0,a.jsx)(r.code,{children:"<uses-feature "})," entries corresponding to the configuration:"]}),"\n",(0,a.jsx)(r.pre,{children:(0,a.jsx)(r.code,{className:"language-xml",children:'// success-line\n<uses-feature android:name="android.hardware.camera.front" android:required="true"/>\n// success-line\n<uses-feature android:name="android.hardware.microphone" android:required="true"/>\n'})}),"\n",(0,a.jsx)(r.hr,{}),"\n",(0,a.jsx)(r.p,{children:"And that's it!"}),"\n",(0,a.jsx)(r.p,{children:"When you publish your app to both app stores, the new hardware requirements will prevent users from downloading your app if their device doesn't meet these specifications."})]})}function u(e={}){const{wrapper:r}={...(0,i.M)(),...e.components};return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},4552:(e,r,n)=>{n.d(r,{I:()=>t,M:()=>o});var a=n(1504);const i={},d=a.createContext(i);function o(e){const r=a.useContext(d);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function t(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),a.createElement(d.Provider,{value:r},e.children)}}}]);