"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[3135],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=o,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9262:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",tags:["UI","FlatList","SectionList","scrollTo"],last_update:{author:"Mark Rickert"},publish_date:new Date("2022-10-09T00:00:00.000Z")},a=void 0,l={unversionedId:"recipes/UnrenderedItemInScrollView",id:"recipes/UnrenderedItemInScrollView",title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",source:"@site/docs/recipes/UnrenderedItemInScrollView.md",sourceDirName:"recipes",slug:"/recipes/UnrenderedItemInScrollView",permalink:"/docs/recipes/UnrenderedItemInScrollView",draft:!1,tags:[{label:"UI",permalink:"/docs/tags/ui"},{label:"FlatList",permalink:"/docs/tags/flat-list"},{label:"SectionList",permalink:"/docs/tags/section-list"},{label:"scrollTo",permalink:"/docs/tags/scroll-to"}],version:"current",lastUpdatedBy:"Mark Rickert",lastUpdatedAt:1675293932,formattedLastUpdatedAt:"Feb 1, 2023",frontMatter:{title:"Scrolling to a location that hasn't been rendered using FlatList or SectionList",description:"This article explains how to scroll to a location of a FlatList or SectionList that hasn't rendered yet",tags:["UI","FlatList","SectionList","scrollTo"],last_update:{author:"Mark Rickert"},publish_date:"2022-10-09T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"TypeScript baseUrl Configuration",permalink:"/docs/recipes/TypeScriptBaseURL"},next:{title:"Updating Dependencies with Yarn Audit, Outdated and Upgrade",permalink:"/docs/recipes/UpdatingDependencies"}},s={},c=[],p={toc:c};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Calling ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollViewRef.current.scrollToLocation()")," on a React Native ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," will fail on occasion because it can't scroll to a location that hasn't been rendered yet."),(0,o.kt)("p",null,"The solution to this is implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"onScrollToIndexFailed")," with some sort of recovery functionality to keep trying the scroll. This is a Higher Order Component (HOC) for ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," that handles this for us."),(0,o.kt)("p",null,"This component basically tries over and over to scroll to the requested location until it gets it right and no longer calls ",(0,o.kt)("inlineCode",{parentName:"p"},"onScrollToIndexFailed"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import * as React from 'react';\nimport { SectionList, SectionListProps, SectionListScrollParams } from 'react-native';\n\ninterface SectionListHandle {\n  scrollToLocation: (params: SectionListScrollParams) => void;\n}\n\n/**\n * This is a wrapper around react-native's SectionList that adds protection against scrolling to an\n * unknown (not rendered yet) location. This is useful for cases where the user wants to scroll to a\n * position very far down the list but we haven't rendered that far yet.\n *\n * This adds onScrollToIndexFailed property to SectionList so that if the scroll fails, we calculate the approximate\n * scroll position, scroll there, and then try again to get the exact position requested.\n *\n * Essentially, it's a \"guess the position and retry the operation\" strategy until the list is scrolled to the\n * correct location.\n */\nexport const ScrollProtectedSectionList = React.forwardRef<\n  SectionListHandle,\n  SectionListProps<any, any>\n>((props, forwardedRef) => {\n  const internalRef = React.useRef<SectionList>(null);\n  const [lastScrollRequest, setLastScrollRequest] = React.useState<SectionListScrollParams>();\n  const timeout = React.useRef<ReturnType<typeof setTimeout>>();\n\n  const onScrollToIndexFailed = (info: {\n    index: number;\n    highestMeasuredFrameIndex: number;\n    averageItemLength: number;\n  }) => {\n    console.log('ScrollProtectedSectionList.onScrollToIndexFailed', info);\n\n    // Calculate the possible position of the item and scroll there using the internal scroll responder.\n    const offset = info.averageItemLength * info.index;\n    internalRef.current?.getScrollResponder()?.scrollTo({ x: 0, y: offset, animated: false });\n\n    // If we know exactly where we want to scroll to, we can just scroll now since the item is likely visible.\n    // Otherwise it'll call this function recursively again.\n    if (lastScrollRequest) {\n      timeout.current = setTimeout(() => {\n        internalRef.current?.scrollToLocation(lastScrollRequest);\n      }, 100);\n    }\n  };\n\n  // Clear the timeout if it still exists when the component unmounts.\n  React.useEffect(() => {\n    return () => timeout.current && clearTimeout(timeout.current);\n  }, []);\n\n  React.useImperativeHandle(\n    forwardedRef,\n    () => ({\n      scrollToLocation: (params: SectionListScrollParams) => {\n        internalRef.current?.scrollToLocation(params);\n        setLastScrollRequest(params);\n      },\n    }),\n    [internalRef],\n  );\n\n  return <SectionList {...props} ref={internalRef} onScrollToIndexFailed={onScrollToIndexFailed} />;\n});\n")))}d.isMDXComponent=!0}}]);