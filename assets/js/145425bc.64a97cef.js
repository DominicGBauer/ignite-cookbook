"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[16],{2392:(t,n,e)=>{e.r(n),e.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>c});var o=e(7624),a=e(4552);const i={title:"Accessiblity Font Sizes",description:"Dealing With Accessibility Font Sizes in React Native",tags:["Accessibility"],last_update:{author:"Mark Rickert"},publish_date:new Date("2022-10-09T00:00:00.000Z")},s="Dealing With Accessibility Font Sizes in React Native",r={id:"recipes/AccessibilityFontSizes",title:"Accessiblity Font Sizes",description:"Dealing With Accessibility Font Sizes in React Native",source:"@site/docs/recipes/AccessibilityFontSizes.md",sourceDirName:"recipes",slug:"/recipes/AccessibilityFontSizes",permalink:"/docs/recipes/AccessibilityFontSizes",draft:!1,unlisted:!1,tags:[{label:"Accessibility",permalink:"/docs/tags/accessibility"}],version:"current",lastUpdatedBy:"Mark Rickert",lastUpdatedAt:1677511343,formattedLastUpdatedAt:"Feb 27, 2023",frontMatter:{title:"Accessiblity Font Sizes",description:"Dealing With Accessibility Font Sizes in React Native",tags:["Accessibility"],last_update:{author:"Mark Rickert"},publish_date:"2022-10-09T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Intro to Recipes",permalink:"/docs/intro"},next:{title:"CircleCI CD Setup - React Native",permalink:"/docs/recipes/CircleCIRNSetup"}},l={},c=[];function p(t){const n={code:"code",h1:"h1",p:"p",pre:"pre",...(0,a.M)(),...t.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"dealing-with-accessibility-font-sizes-in-react-native",children:"Dealing With Accessibility Font Sizes in React Native"}),"\n",(0,o.jsx)(n.p,{children:"Modern phones have a lot of accessibility options. Users can make the font size on Android GIGANTIC. This is a way you can allow users to scale their fonts larger and smaller, but only to a certain point. We wanted the accessibility but not the extreme ends of it, just to keep things readable without turning off font scaling completely."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-jsx",children:'import * as React from "react";\nimport { View, TextProps, PixelRatio, AppState } from "react-native";\nimport { MaterialTopTabNavigationOptions } from "@react-navigation/material-top-tabs";\nimport { StackNavigationOptions } from "@react-navigation/stack";\nimport { BottomTabNavigationOptions } from "@react-navigation/bottom-tabs";\nimport { DrawerNavigationOptions } from "@react-navigation/drawer";\nimport { Text } from "./Text";\n\n// These constants determine how much bigger the font size should get based on the user\'s\n// accessibility settings. Even if they turn the dial all the way to 11, we will only ever\n// scale the fonts by these factors. This is to prevent the font size from getting too large\n// and completely breaking the layout.\nconst MAX_FONT_SCALE = 1.2;\nconst MIN_FONT_SCALE = 0.8;\n\n// Returns fontScaling props for Text and TextInput components\n// Usage:\n// const fontProps = useFontScaling();\n// return <Text {...fontProps}>Text Here</Text>;\nexport const useFontScaling = (): Partial<TextProps> => {\n  // You probably want to get this value from your user\'s preferences\n  const [allowFontScaling,] = React.useState(true);\n\n  const fontScaling: Partial<TextProps> = React.useMemo(() => {\n    return {\n      minimumFontScale: allowFontScaling ? MIN_FONT_SCALE : 1, // This prevents the font from getting too small.\n      maxFontSizeMultiplier: allowFontScaling ? MAX_FONT_SCALE : 1, // This prevents the font from getting too big.\n      allowFontScaling, // This allows the font to be scaled or not.\n    };\n  }, [allowFontScaling]);\n\n  return fontScaling;\n};\n\n// Returns fontScaling props for Navigator components\nexport const useNavigatorFontScalingScreenOptions =\n  (): Partial<StackNavigationOptions> => {\n    // You probably want to get this value from your user\'s preferences\n    const [allowFontScaling,] = React.useState(true);\n\n    const fontScaling: Partial<StackNavigationOptions> = React.useMemo(() => {\n      return {\n        headerBackAllowFontScaling: allowFontScaling,\n        headerTitleAllowFontScaling: allowFontScaling,\n      };\n    }, [allowFontScaling]);\n\n    return fontScaling;\n  };\n\n// Returns fontScaling props for Top Tab Navigator components\nexport const useTopTabNavigatorFontScalingScreenOptions =\n  (): Partial<MaterialTopTabNavigationOptions> => {\n    // You probably want to get this value from your user\'s preferences\n    const [allowFontScaling,] = React.useState(true);\n\n    const fontScaling: Partial<MaterialTopTabNavigationOptions> =\n      React.useMemo(() => {\n        return {\n          tabBarAllowFontScaling: allowFontScaling,\n        };\n      }, [allowFontScaling]);\n\n    return fontScaling;\n  };\n\n// Returns fontScaling props for Tab Navigator components\nexport const useTabNavigatorFontScalingScreenOptions =\n  (): Partial<BottomTabNavigationOptions> => {\n    // You probably want to get this value from your user\'s preferences\n    const [allowFontScaling,] = React.useState(true);\n\n    const fontScaling: Partial<BottomTabNavigationOptions> =\n      React.useMemo(() => {\n        return {\n          tabBarAllowFontScaling: fontScaling,\n          headerTitleAllowFontScaling: fontScaling,\n        };\n      }, [allowFontScaling]);\n\n    return fontScaling;\n  };\n\n// Returns fontScaling props for Tab Navigator components\nexport const useDrawerNavigatorFontScalingScreenOptions =\n  (): Partial<DrawerNavigationOptions> => {\n    const [allowFontScaling,] = React.useState(true);\n\n    const fontScaling: Partial<DrawerNavigationOptions> = React.useMemo(() => {\n      return {\n        drawerAllowFontScaling: allowFontScaling,\n        headerTitleAllowFontScaling: allowFontScaling,\n      };\n    }, [allowFontScaling]);\n\n    return fontScaling;\n  };\n\n// Use this handy __DEV__ mode only component to figure out what the font size is actually doing.\nexport const DevFontSize = () => {\n  const [allowFontScaling,] = React.useState(true);\n  const [appStateVisible, setAppStateVisible] = React.useState(\n    AppState.currentState\n  );\n\n  React.useEffect(() => {\n    const subscription = AppState.addEventListener("change", (nextAppState) => {\n      setAppStateVisible(nextAppState);\n    });\n\n    return () => subscription.remove();\n  }, []);\n\n  // This memo has to listen to appStateVisible even though it\'s not a direct dependency\n  // so that we can reload the font size when the app switches back from user settings.\n  const fontSize = React.useMemo(() => {\n    if (allowFontScaling) {\n      return Math.min(\n        Math.max(PixelRatio.getFontScale(), MIN_FONT_SCALE),\n        MAX_FONT_SCALE\n      );\n    } else {\n      return 1.0;\n    }\n  }, [allowFontScaling, appStateVisible]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  return __DEV__ ? (\n    <View style={{\n      backgroundColor: \'#E58F83\',\n      padding: 10,\n      margin: 10,\n      borderRadius: 5,\n      borderColor: \'#000,\n      borderWidth: 1,\n    }}>\n      <Text>\n        User Font Setting: {Math.trunc(PixelRatio.getFontScale() * 100) / 100}\n      </Text>\n      <Text>\n        Currently limiting ratio to: {Math.trunc(fontSize * 100) / 100}\n      </Text>\n    </View>\n  ) : null;\n};\n'})})]})}function u(t={}){const{wrapper:n}={...(0,a.M)(),...t.components};return n?(0,o.jsx)(n,{...t,children:(0,o.jsx)(p,{...t})}):p(t)}},4552:(t,n,e)=>{e.d(n,{I:()=>r,M:()=>s});var o=e(1504);const a={},i=o.createContext(a);function s(t){const n=o.useContext(i);return o.useMemo((function(){return"function"==typeof t?t(n):{...n,...t}}),[n,t])}function r(t){let n;return n=t.disableParentContext?"function"==typeof t.components?t.components(a):t.components||a:s(t.components),o.createElement(i.Provider,{value:n},t.children)}}}]);