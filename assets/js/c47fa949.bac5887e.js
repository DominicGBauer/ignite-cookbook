"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[5032],{8332:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>a,toc:()=>l});var o=t(7624),s=t(2172);const r={title:"Expo Router",description:"How to convert Ignite v9 demo app to utilize `expo-router`",tags:["Expo","expo-router","react-navigation"],last_update:{author:"Frank Calise & Justin Poliachik"},publish_date:new Date("2024-01-25T00:00:00.000Z")},i="Expo Router",a={id:"recipes/ExpoRouter",title:"Expo Router",description:"How to convert Ignite v9 demo app to utilize `expo-router`",source:"@site/docs/recipes/ExpoRouter.md",sourceDirName:"recipes",slug:"/recipes/ExpoRouter",permalink:"/docs/recipes/ExpoRouter",draft:!1,unlisted:!1,tags:[{label:"Expo",permalink:"/docs/tags/expo"},{label:"expo-router",permalink:"/docs/tags/expo-router"},{label:"react-navigation",permalink:"/docs/tags/react-navigation"}],version:"current",lastUpdatedBy:"Frank Calise & Justin Poliachik",lastUpdatedAt:1713538898,formattedLastUpdatedAt:"Apr 19, 2024",frontMatter:{title:"Expo Router",description:"How to convert Ignite v9 demo app to utilize `expo-router`",tags:["Expo","expo-router","react-navigation"],last_update:{author:"Frank Calise & Justin Poliachik"},publish_date:"2024-01-25T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Environment Variables",permalink:"/docs/recipes/EnvironmentVariables"},next:{title:"Generator for Component Tests",permalink:"/docs/recipes/GeneratorComponentTests"}},c={},l=[{value:"Overview",id:"overview",level:2},{value:"Installation and Project Configuration",id:"installation-and-project-configuration",level:2},{value:"Reworking the Directory Structure",id:"reworking-the-directory-structure",level:2},{value:"Fix Imports",id:"fix-imports",level:3},{value:"Creating File-based Routes",id:"creating-file-based-routes",level:2},{value:"src/app/_layout.tsx",id:"srcapp_layouttsx",level:3},{value:"src/app/(app)/_layout.tsx",id:"srcappapp_layouttsx",level:3},{value:"src/app/log-in.tsx",id:"srcapplog-intsx",level:3},{value:"src/app/(app)/index.tsx",id:"srcappappindextsx",level:3},{value:"Checkpoint",id:"checkpoint",level:3},{value:"Adding Tab Navigation",id:"adding-tab-navigation",level:2},{value:"Creating Tab Screens",id:"creating-tab-screens",level:3},{value:"Showroom Screen",id:"showroom-screen",level:3},{value:"Code Cleanup",id:"code-cleanup",level:2},{value:"Summary",id:"summary",level:2},{value:"Additional Resources",id:"additional-resources",level:2}];function d(e){const n={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.M)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"expo-router",children:"Expo Router"}),"\n",(0,o.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsxs)(n.p,{children:["Expo Router brings file-based routing to React Native and web applications allowing you to easily create universal apps. Whenever a file is added to your ",(0,o.jsx)(n.code,{children:"src/app"})," directory, a new path is automatically added to your navigation."]}),"\n",(0,o.jsxs)(n.p,{children:["For the full documentation by ",(0,o.jsx)(n.a,{href:"https://expo.dev",children:"Expo"}),", head on over to the ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/routing/introduction/",children:"Introduction to Expo Router"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Ignite v9 is fully equipped to utilize ",(0,o.jsx)(n.code,{children:"expo-router"})," after dependency installation and some directory structure updates! In this recipe, we'll convert the demo app's auth and tab navigators from ",(0,o.jsx)(n.code,{children:"react-navigation"})," to use ",(0,o.jsx)(n.code,{children:"expo-router"}),"."]}),"\n",(0,o.jsx)(n.admonition,{type:"tip",children:(0,o.jsxs)(n.p,{children:["This recipe is using Expo Router v3, which became available in Expo SDK 50. If you're using an older version of Expo, you can find more information about implementing it in your app in the ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/router/installation/",children:"Expo Router documentation"}),"."]})}),"\n",(0,o.jsx)(n.h2,{id:"installation-and-project-configuration",children:"Installation and Project Configuration"}),"\n",(0,o.jsx)(n.p,{children:"Bootstrap a new Ignite project:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npx ignite-cli@next new pizza-router --yes\ncd pizza-router\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add the missing dependencies ",(0,o.jsx)(n.code,{children:"expo-router"})," needs:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npx expo install expo-router expo-constants\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Add ",(0,o.jsx)(n.code,{children:"expo-router"})," to ",(0,o.jsx)(n.code,{children:"app.json"})," plugins list if necessary:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'"plugins": [\n   ...\n  "expo-font",\n  // success-line\n  "expo-router"\n],\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Change the entry point that ",(0,o.jsx)(n.code,{children:"expo-router"})," expects in ",(0,o.jsx)(n.code,{children:"package.json"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'// error-line\n"main": "node_modules/expo/AppEntry.js",\n// success-line\n"main": "expo-router/entry",\n'})}),"\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.code,{children:"expo-router"})," has great ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/router/reference/typed-routes/",children:"TypeScript support"}),", so let's enable that in ",(0,o.jsx)(n.code,{children:"app.json"})," under ",(0,o.jsx)(n.code,{children:"experiments"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "expo": {\n    "experiments": {\n      "tsconfigPaths": true,\n      // success-line\n      "typedRoutes": true\n    }\n  }\n}\n'})}),"\n",(0,o.jsx)(n.h2,{id:"reworking-the-directory-structure",children:"Reworking the Directory Structure"}),"\n",(0,o.jsxs)(n.p,{children:["Expo Router requires route files to live in either ",(0,o.jsx)(n.code,{children:"app"})," or ",(0,o.jsx)(n.code,{children:"src/app"})," directories. But since our Ignite project is already using ",(0,o.jsx)(n.code,{children:"app"}),", we'll need to rename it to ",(0,o.jsx)(n.code,{children:"src"}),". We'll create ",(0,o.jsx)(n.code,{children:"src/app"})," to contain all the file-base routing files from here on out, and models, components and other shared files will be located in the ",(0,o.jsx)(n.code,{children:"src"})," directory now. We'll also remove ",(0,o.jsx)(n.code,{children:"App.tsx"})," as this is no longer the entry point of the application."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rm App.tsx\nmv app src\nmkdir src/app\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Let's update the TS alias and include paths over in ",(0,o.jsx)(n.code,{children:"tsconfig.json"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'{\n  "compilerOptions": {\n    // ...\n    "paths": {\n      // error-line\n      "app/*": ["./app/*"],\n      // success-line\n      "src/*": ["./src/*"],\n      // ...\n    },\n  }\n  // error-line-start\n   "include": [\n    "index.js",\n    "App.tsx",\n    "app",\n    "types",\n    "plugins",\n    "app.config.ts",\n    ".expo/types/**/*.ts",\n    "expo-env.d.ts"\n  ],\n  // error-line-end\n  // success-line\n  "include": ["**/*.ts", "**/*.tsx"],\n  // ...\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"fix-imports",children:"Fix Imports"}),"\n",(0,o.jsxs)(n.p,{children:["We also need to fix up a few imports to use ",(0,o.jsx)(n.code,{children:"src/"})," instead of ",(0,o.jsx)(n.code,{children:"app/"}),".\nIgnite's Demo App only contains a few files we need to update, but an existing app could contain more."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"package.json"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-json",children:'// error-line-start\n"format": "prettier --write \\"app/**/*.{js,jsx,json,md,ts,tsx}\\"",\n"lint": "eslint App.tsx app test --fix --ext .js,.ts,.tsx && npm run format",\n// error-line-end\n// success-line-start\n"format": "prettier --write \\"src/**/*.{js,jsx,json,md,ts,tsx}\\"",\n"lint": "eslint src test --fix --ext .js,.ts,.tsx && npm run format",\n// success-line-end\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"src/devtools/ReactotronConfig.ts"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// error-line-start\nimport { clear } from "app/utils/storage";\nimport { goBack, resetRoot, navigate } from "app/navigators/navigationUtilities";\n// error-line-end\n// success-line-start\nimport { clear } from "src/utils/storage";\nimport { goBack, resetRoot, navigate } from "src/navigators/navigationUtilities";\n// success-line-end\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"src/components/ListView.ts"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// error-line\nimport { isRTL } from "app/i18n";\n// success-line\nimport { isRTL } from "src/i18n";\n'})}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"src/components/Toggle.ts"})})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// error-line\nimport { isRTL } from "app/i18n";\n// success-line\nimport { isRTL } from "src/i18n";\n'})}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"(optional) Additional files to update"}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"test/i18n.test.ts"})})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// error-line\nimport en from "../app/i18n/en";\n// success-line\nimport en from "../src/i18n/en";\nimport { exec } from "child_process";\n'})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"ignite/templates/component/NAME.tsx.ejs"})})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'---\npatch:\n  // error-line\n  path: "app/components/index.ts"\n  // success-line\n  path: "src/components/index.ts"\n  append: "export * from \\"./<%= props.subdirectory %><%= props.pascalCaseName %>\\"\\n"\n  skip: <%= props.skipIndexFile %>\n---\nimport * as React from "react"\nimport { StyleProp, TextStyle, View, ViewStyle } from "react-native"\nimport { observer } from "mobx-react-lite"\n// error-line-start\nimport { colors, typography } from "app/theme"\nimport { Text } from "app/components/Text"\n// error-line-end\n// success-line-start\nimport { colors, typography } from "src/theme"\nimport { Text } from "src/components/Text"\n// success-line-end\n'})}),(0,o.jsx)(n.p,{children:(0,o.jsx)(n.strong,{children:(0,o.jsx)(n.code,{children:"ignite/templates/model/NAME.tsx.ejs"})})}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-js",children:'---\npatches:\n// error-line\n- path: "app/models/RootStore.ts"\n// success-line\n- path: "src/models/RootStore.ts"\n  after: "from \\"mobx-state-tree\\"\\n"\n  insert: "import { <%= props.pascalCaseName %>Model } from \\"./<%= props.pascalCaseName %>\\"\\n"\n  skip: <%= !props.pascalCaseName.endsWith(\'Store\') %>\n// error-line\n- path: "app/models/RootStore.ts"\n// success-line\n- path: "src/models/RootStore.ts"\n  after: "types.model(\\"RootStore\\").props({\\n"\n  insert: "  <%= props.camelCaseName %>: types.optional(<%= props.pascalCaseName %>Model, {} as any),\\n"\n  skip: <%= !props.pascalCaseName.endsWith(\'Store\') %>\n// error-line\n- path: "app/models/index.ts"\n// success-line\n- path: "src/models/index.ts"\n\n'})})]}),"\n",(0,o.jsx)(n.h2,{id:"creating-file-based-routes",children:"Creating File-based Routes"}),"\n",(0,o.jsx)(n.h3,{id:"srcapp_layouttsx",children:"src/app/_layout.tsx"}),"\n",(0,o.jsxs)(n.p,{children:["We're now ready to start setting up navigation for the app! If you're familiar with Ignite, ",(0,o.jsx)(n.code,{children:"app.tsx"})," is where our root navigator lives, however, with ",(0,o.jsx)(n.code,{children:"expo-router"}),", we'll use ",(0,o.jsx)(n.code,{children:"src/app/_layout.tsx"})," for that. We'll add the providers here that any route would need within the app."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'// app/_layout.tsx\nimport React from "react";\nimport { Slot, SplashScreen } from "expo-router";\nimport { useInitialRootStore } from "src/models";\n\nSplashScreen.preventAutoHideAsync();\n\nif (__DEV__) {\n  // Load Reactotron configuration in development. We don\'t want to\n  // include this in our production bundle, so we are using `if (__DEV__)`\n  // to only execute this in development.\n  require("src/devtools/ReactotronConfig.ts");\n}\n\nexport { ErrorBoundary } from "src/components/ErrorBoundary/ErrorBoundary";\n\nexport default function Root() {\n  // Wait for stores to load and render our layout inside of it so we have access\n  // to auth info etc\n  const { rehydrated } = useInitialRootStore();\n  if (!rehydrated) {\n    return null;\n  }\n\n  return <Slot />;\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Move ",(0,o.jsx)(n.code,{children:"ErrorBoundary"})," out of ",(0,o.jsx)(n.code,{children:"screens/ErrorScreen"})," and into ",(0,o.jsx)(n.code,{children:"src/components/ErrorBoundary"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mkdir src/components/ErrorBoundary\nmv src/screens/ErrorScreen/* src/components/ErrorBoundary\n"})}),"\n",(0,o.jsxs)(n.p,{children:["For starters, this sets up our error boundary for the app and handles waiting on our stores to rehydrate. ",(0,o.jsx)(n.code,{children:"<Slot />"})," comes from ",(0,o.jsx)(n.code,{children:"expo-router"}),", you can think of it like the ",(0,o.jsx)(n.code,{children:"children"})," prop in ",(0,o.jsx)(n.code,{children:"React"}),". This component can be wrapped with others to help create a layout."]}),"\n",(0,o.jsxs)(n.p,{children:["Next, we'll convert the conditional part of authentication from ",(0,o.jsx)(n.code,{children:"react-navigation"})," to ",(0,o.jsx)(n.code,{children:"expo-router"}),", deciding on whether or not to display the login form or get to the welcome screen experience."]}),"\n",(0,o.jsx)(n.h3,{id:"srcappapp_layouttsx",children:"src/app/(app)/_layout.tsx"}),"\n",(0,o.jsxs)(n.p,{children:["Create another ",(0,o.jsx)(n.code,{children:"_layout.tsx"})," but this time inside of a new directory, ",(0,o.jsx)(n.code,{children:"src/app/(app)"}),". This route wrapped in parentheses is called a ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/routing/layouts/#groups",children:"Group"}),". Groups can be used to add layouts and/or help organize sections of the app without adding additional segments to the URL. Remember, each directory is a route in this new mental model of file-based routing - but sometimes we don't want that, that's when you'll call upon groups."]}),"\n",(0,o.jsx)(n.p,{children:"In this layout is where we'll determine if the user is authenticated by checking our MST store. We'll also wait here while assets are loaded and then hide the splash screen when finished."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { Redirect, SplashScreen, Stack } from "expo-router";\nimport { observer } from "mobx-react-lite";\nimport { useStores } from "src/models";\nimport { useFonts } from "expo-font";\nimport { customFontsToLoad } from "src/theme";\n\nexport default observer(function Layout() {\n  const {\n    authenticationStore: { isAuthenticated },\n  } = useStores();\n\n  const [fontsLoaded, fontError] = useFonts(customFontsToLoad);\n\n  React.useEffect(() => {\n    if (fontsLoaded || fontError) {\n      // Hide the splash screen after the fonts have loaded and the UI is ready.\n      SplashScreen.hideAsync();\n    }\n  }, [fontsLoaded, fontError]);\n\n  if (!fontsLoaded && !fontError) {\n    return null;\n  }\n\n  if (!isAuthenticated) {\n    return <Redirect href="/log-in" />;\n  }\n\n  return <Stack screenOptions={{ headerShown: false }} />;\n});\n'})}),"\n",(0,o.jsxs)(n.p,{children:["As you can see, if the user is not authenticated we redirect them to the ",(0,o.jsx)(n.code,{children:"/log-in"})," route, otherwise we'll render a stack navigator. TypeScript is probably telling us that route doesn't exist yet, so let's fix that."]}),"\n",(0,o.jsx)(n.h3,{id:"srcapplog-intsx",children:"src/app/log-in.tsx"}),"\n",(0,o.jsxs)(n.p,{children:["To redirect the user to the login form, create ",(0,o.jsx)(n.code,{children:"src/app/log-in.tsx"}),". We'll copy over the contents from the original boilerplate ",(0,o.jsx)(n.code,{children:"src/screens/LoginScreen.tsx"})," to help the UI layout of this page."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/log-in.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { router } from "expo-router";\nimport { observer } from "mobx-react-lite";\nimport React, { ComponentType, useEffect, useMemo, useRef, useState } from "react";\nimport { TextInput, TextStyle, ViewStyle } from "react-native";\nimport { Button, Icon, Screen, Text, TextField, TextFieldAccessoryProps } from "src/components";\nimport { useStores } from "src/models";\nimport { colors, spacing } from "src/theme";\n\nexport default observer(function Login(_props) {\n  const authPasswordInput = useRef<TextInput>(null);\n\n  const [authPassword, setAuthPassword] = useState("");\n  const [isAuthPasswordHidden, setIsAuthPasswordHidden] = useState(true);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const [attemptsCount, setAttemptsCount] = useState(0);\n  const {\n    authenticationStore: { authEmail, setAuthEmail, setAuthToken, validationError },\n  } = useStores();\n\n  useEffect(() => {\n    // Here is where you could fetch credentials from keychain or storage\n    // and pre-fill the form fields.\n    setAuthEmail("ignite@infinite.red");\n    setAuthPassword("ign1teIsAwes0m3");\n\n    // Return a "cleanup" function that React will run when the component unmounts\n    return () => {\n      setAuthPassword("");\n      setAuthEmail("");\n    };\n  }, []);\n\n  const error = isSubmitted ? validationError : "";\n\n  function login() {\n    setIsSubmitted(true);\n    setAttemptsCount(attemptsCount + 1);\n\n    if (validationError) return;\n\n    // Make a request to your server to get an authentication token.\n    // If successful, reset the fields and set the token.\n    setIsSubmitted(false);\n    setAuthPassword("");\n    setAuthEmail("");\n\n    // We\'ll mock this with a fake token.\n    setAuthToken(String(Date.now()));\n\n    // navigate to the main screen\n    router.replace("/");\n  }\n\n  const PasswordRightAccessory: ComponentType<TextFieldAccessoryProps> = useMemo(\n    () =>\n      function PasswordRightAccessory(props: TextFieldAccessoryProps) {\n        return (\n          <Icon\n            icon={isAuthPasswordHidden ? "view" : "hidden"}\n            color={colors.palette.neutral800}\n            containerStyle={props.style}\n            size={20}\n            onPress={() => setIsAuthPasswordHidden(!isAuthPasswordHidden)}\n          />\n        );\n      },\n    [isAuthPasswordHidden]\n  );\n\n  return (\n    <Screen preset="auto" contentContainerStyle={$screenContentContainer} safeAreaEdges={["top", "bottom"]}>\n      <Text testID="login-heading" tx="loginScreen.signIn" preset="heading" style={$signIn} />\n      <Text tx="loginScreen.enterDetails" preset="subheading" style={$enterDetails} />\n      {attemptsCount > 2 && <Text tx="loginScreen.hint" size="sm" weight="light" style={$hint} />}\n\n      <TextField\n        value={authEmail}\n        onChangeText={setAuthEmail}\n        containerStyle={$textField}\n        autoCapitalize="none"\n        autoComplete="email"\n        autoCorrect={false}\n        keyboardType="email-address"\n        labelTx="loginScreen.emailFieldLabel"\n        placeholderTx="loginScreen.emailFieldPlaceholder"\n        helper={error}\n        status={error ? "error" : undefined}\n        onSubmitEditing={() => authPasswordInput.current?.focus()}\n      />\n\n      <TextField\n        ref={authPasswordInput}\n        value={authPassword}\n        onChangeText={setAuthPassword}\n        containerStyle={$textField}\n        autoCapitalize="none"\n        autoComplete="password"\n        autoCorrect={false}\n        secureTextEntry={isAuthPasswordHidden}\n        labelTx="loginScreen.passwordFieldLabel"\n        placeholderTx="loginScreen.passwordFieldPlaceholder"\n        onSubmitEditing={login}\n        RightAccessory={PasswordRightAccessory}\n      />\n\n      <Button testID="login-button" tx="loginScreen.tapToSignIn" style={$tapButton} preset="reversed" onPress={login} />\n    </Screen>\n  );\n});\n\nconst $screenContentContainer: ViewStyle = {\n  paddingVertical: spacing.xxl,\n  paddingHorizontal: spacing.lg,\n};\n\nconst $signIn: TextStyle = {\n  marginBottom: spacing.sm,\n};\n\nconst $enterDetails: TextStyle = {\n  marginBottom: spacing.lg,\n};\n\nconst $hint: TextStyle = {\n  color: colors.tint,\n  marginBottom: spacing.md,\n};\n\nconst $textField: ViewStyle = {\n  marginBottom: spacing.lg,\n};\n\nconst $tapButton: ViewStyle = {\n  marginTop: spacing.xs,\n};\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you're familiar with the Ignite boilerplate, this is the same authentication screen you are used to - the only difference here is some of the imports now from from ",(0,o.jsx)(n.code,{children:"src/*"})," rather than the relative paths. So keep that in mind if you're upgrading an existing application."]}),"\n",(0,o.jsx)(n.h3,{id:"srcappappindextsx",children:"src/app/(app)/index.tsx"}),"\n",(0,o.jsx)(n.p,{children:"If the user is successfully authenticated, we'll show them the welcome screen. Can you guess what the route will be by looking at the directory structure?"}),"\n",(0,o.jsxs)(n.p,{children:["Just the root route! Think about it in terms of web URLs, if arriving at ",(0,o.jsx)(n.code,{children:"http://localhost:8081/"})," (in this case of local development), we'd expect to see the welcome screen. However, if we're not authenticated, we'll be redirected to ",(0,o.jsx)(n.code,{children:"/log-in"})," to ask the user to log in."]}),"\n",(0,o.jsxs)(n.p,{children:["This JSX will be the same exact contents from ",(0,o.jsx)(n.code,{children:"WelcomeScreen.tsx"})," in the original Ignite boilerplate with the exception of some import paths (using the TS aliases) and a simple update to ",(0,o.jsx)(n.code,{children:"goNext"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["Since we'll no longer use the ",(0,o.jsx)(n.code,{children:"navigation"})," prop, we utilize ",(0,o.jsx)(n.code,{children:"expo-router"}),"'s ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/routing/navigating-pages/#imperative-navigation",children:"Imperative navigation"})," to navigate to the component demo Showroom next. We're using ",(0,o.jsx)(n.code,{children:".replace"})," since we don't need to get back to this route. You can read more about ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/routing/navigating-pages/",children:"Navigating between pages"})," at Expo's documentation."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/index.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { router } from "expo-router";\nimport { observer } from "mobx-react-lite";\nimport React from "react";\nimport { Image, ImageStyle, TextStyle, View, ViewStyle } from "react-native";\nimport { Button, Text } from "src/components";\nimport { isRTL } from "src/i18n";\nimport { useStores } from "src/models";\nimport { colors, spacing } from "src/theme";\nimport { useHeader } from "src/utils/useHeader";\nimport { useSafeAreaInsetsStyle } from "src/utils/useSafeAreaInsetsStyle";\n\nconst welcomeLogo = require("assets/images/logo.png");\nconst welcomeFace = require("assets/images/welcome-face.png");\n\nexport default observer(function WelcomeScreen() {\n  const {\n    authenticationStore: { logout },\n  } = useStores();\n\n  function goNext() {\n    router.replace("/showroom");\n  }\n\n  useHeader(\n    {\n      rightTx: "common.logOut",\n      onRightPress: logout,\n    },\n    [logout]\n  );\n\n  const $bottomContainerInsets = useSafeAreaInsetsStyle(["bottom"]);\n\n  return (\n    <View style={$container}>\n      <View style={$topContainer}>\n        <Image style={$welcomeLogo} source={welcomeLogo} resizeMode="contain" />\n        <Text testID="welcome-heading" style={$welcomeHeading} tx="welcomeScreen.readyForLaunch" preset="heading" />\n        <Text tx="welcomeScreen.exciting" preset="subheading" />\n        <Image style={$welcomeFace} source={welcomeFace} resizeMode="contain" />\n      </View>\n\n      <View style={[$bottomContainer, $bottomContainerInsets]}>\n        <Text tx="welcomeScreen.postscript" size="md" />\n        <Button testID="next-screen-button" preset="reversed" tx="welcomeScreen.letsGo" onPress={goNext} />\n      </View>\n    </View>\n  );\n});\n\nconst $container: ViewStyle = {\n  flex: 1,\n  backgroundColor: colors.background,\n};\n\nconst $topContainer: ViewStyle = {\n  flexShrink: 1,\n  flexGrow: 1,\n  flexBasis: "57%",\n  justifyContent: "center",\n  paddingHorizontal: spacing.lg,\n};\n\nconst $bottomContainer: ViewStyle = {\n  flexShrink: 1,\n  flexGrow: 0,\n  flexBasis: "43%",\n  backgroundColor: colors.palette.neutral100,\n  borderTopLeftRadius: 16,\n  borderTopRightRadius: 16,\n  paddingHorizontal: spacing.lg,\n  justifyContent: "space-around",\n};\nconst $welcomeLogo: ImageStyle = {\n  height: 88,\n  width: "100%",\n  marginBottom: spacing.xxl,\n};\n\nconst $welcomeFace: ImageStyle = {\n  height: 169,\n  width: 269,\n  position: "absolute",\n  bottom: -47,\n  right: -80,\n  transform: [{ scaleX: isRTL ? -1 : 1 }],\n};\n\nconst $welcomeHeading: TextStyle = {\n  marginBottom: spacing.md,\n};\n'})})]}),"\n",(0,o.jsx)(n.h3,{id:"checkpoint",children:"Checkpoint"}),"\n",(0,o.jsxs)(n.p,{children:["Build and run your app using ",(0,o.jsx)(n.code,{children:"yarn run ios"}),'. You should see the log-in route, be able to authenticate, and navigate to the main "welcome" screen. But we aren\'t done yet - we still need to add the remaining screens in a Tab Navigator.']}),"\n",(0,o.jsx)(n.h2,{id:"adding-tab-navigation",children:"Adding Tab Navigation"}),"\n",(0,o.jsx)(n.p,{children:"First, we'll create another route group to help contain where these routes live and set the layout for the tabs."}),"\n",(0,o.jsxs)(n.p,{children:["Create ",(0,o.jsx)(n.code,{children:"src/app/(app)/(tabs)/_layout.tsx"})," and we'll convert Ignite's previous ",(0,o.jsx)(n.code,{children:"app/navigators/DemoNavigator.tsx"})," to live here."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/(tabs)/_layout.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { Tabs } from "expo-router/tabs";\nimport { observer } from "mobx-react-lite";\nimport { Icon } from "src/components";\nimport { translate } from "src/i18n";\nimport { colors, spacing, typography } from "src/theme";\nimport { TextStyle, ViewStyle } from "react-native";\nimport { useSafeAreaInsets } from "react-native-safe-area-context";\n\nexport default observer(function Layout() {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <Tabs\n      screenOptions={{\n        headerShown: false,\n        tabBarHideOnKeyboard: true,\n        tabBarStyle: [$tabBar, { height: bottom + 70 }],\n        tabBarActiveTintColor: colors.text,\n        tabBarInactiveTintColor: colors.text,\n        tabBarLabelStyle: $tabBarLabel,\n        tabBarItemStyle: $tabBarItem,\n      }}\n    >\n      <Tabs.Screen\n        name="showroom"\n        options={{\n          href: "/showroom",\n          headerShown: false,\n          tabBarLabel: translate("demoNavigator.componentsTab"),\n          tabBarIcon: ({ focused }) => <Icon icon="components" color={focused ? colors.tint : undefined} size={30} />,\n        }}\n      />\n      <Tabs.Screen\n        name="community"\n        options={{\n          href: "/community",\n          headerShown: false,\n          tabBarLabel: translate("demoNavigator.communityTab"),\n          tabBarIcon: ({ focused }) => <Icon icon="community" color={focused ? colors.tint : undefined} size={30} />,\n        }}\n      />\n      <Tabs.Screen\n        name="podcasts"\n        options={{\n          href: "/podcasts",\n          headerShown: false,\n          tabBarAccessibilityLabel: translate("demoNavigator.podcastListTab"),\n          tabBarLabel: translate("demoNavigator.podcastListTab"),\n          tabBarIcon: ({ focused }) => <Icon icon="podcast" color={focused ? colors.tint : undefined} size={30} />,\n        }}\n      />\n      <Tabs.Screen\n        name="debug"\n        options={{\n          href: "/debug",\n          headerShown: false,\n          tabBarLabel: translate("demoNavigator.debugTab"),\n          tabBarIcon: ({ focused }) => <Icon icon="debug" color={focused ? colors.tint : undefined} size={30} />,\n        }}\n      />\n    </Tabs>\n  );\n});\n\nconst $tabBar: ViewStyle = {\n  backgroundColor: colors.background,\n  borderTopColor: colors.transparent,\n};\n\nconst $tabBarItem: ViewStyle = {\n  paddingTop: spacing.md,\n};\n\nconst $tabBarLabel: TextStyle = {\n  fontSize: 12,\n  fontFamily: typography.primary.medium,\n  lineHeight: 16,\n  flex: 1,\n};\n'})})]}),"\n",(0,o.jsx)(n.h3,{id:"creating-tab-screens",children:"Creating Tab Screens"}),"\n",(0,o.jsxs)(n.p,{children:["Now to create screens for each tabs, you simply just add ",(0,o.jsx)(n.code,{children:"[screen].tsx"})," under the ",(0,o.jsx)(n.code,{children:"(tabs)"})," group. Let's bring over the 3 simpler screens first - Community, Podcasts and Debug. Those will mostly be copy \ud83c\udf5d aside from changing the exports to default and import from our TS paths."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/(tabs)/community.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport { Image, ImageStyle, TextStyle, View, ViewStyle } from "react-native";\nimport { ListItem, Screen, Text } from "src/components";\nimport { spacing } from "src/theme";\nimport { openLinkInBrowser } from "src/utils/openLinkInBrowser";\nimport { isRTL } from "src/i18n";\n\nconst chainReactLogo = require("assets/images/demo/cr-logo.png");\nconst reactNativeLiveLogo = require("assets/images/demo/rnl-logo.png");\nconst reactNativeRadioLogo = require("assets/images/demo/rnr-logo.png");\nconst reactNativeNewsletterLogo = require("assets/images/demo/rnn-logo.png");\n\nexport default function DemoCommunityScreen() {\n  return (\n    <Screen preset="scroll" contentContainerStyle={$container} safeAreaEdges={["top"]}>\n      <Text preset="heading" tx="demoCommunityScreen.title" style={$title} />\n      <Text tx="demoCommunityScreen.tagLine" style={$tagline} />\n\n      <Text preset="subheading" tx="demoCommunityScreen.joinUsOnSlackTitle" />\n      <Text tx="demoCommunityScreen.joinUsOnSlack" style={$description} />\n      <ListItem\n        tx="demoCommunityScreen.joinSlackLink"\n        leftIcon="slack"\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        onPress={() => openLinkInBrowser("https://community.infinite.red/")}\n      />\n      <Text preset="subheading" tx="demoCommunityScreen.makeIgniteEvenBetterTitle" style={$sectionTitle} />\n      <Text tx="demoCommunityScreen.makeIgniteEvenBetter" style={$description} />\n      <ListItem\n        tx="demoCommunityScreen.contributeToIgniteLink"\n        leftIcon="github"\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        onPress={() => openLinkInBrowser("https://github.com/infinitered/ignite")}\n      />\n\n      <Text preset="subheading" tx="demoCommunityScreen.theLatestInReactNativeTitle" style={$sectionTitle} />\n      <Text tx="demoCommunityScreen.theLatestInReactNative" style={$description} />\n      <ListItem\n        tx="demoCommunityScreen.reactNativeRadioLink"\n        bottomSeparator\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        LeftComponent={\n          <View style={$logoContainer}>\n            <Image source={reactNativeRadioLogo} style={$logo} />\n          </View>\n        }\n        onPress={() => openLinkInBrowser("https://reactnativeradio.com/")}\n      />\n      <ListItem\n        tx="demoCommunityScreen.reactNativeNewsletterLink"\n        bottomSeparator\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        LeftComponent={\n          <View style={$logoContainer}>\n            <Image source={reactNativeNewsletterLogo} style={$logo} />\n          </View>\n        }\n        onPress={() => openLinkInBrowser("https://reactnativenewsletter.com/")}\n      />\n      <ListItem\n        tx="demoCommunityScreen.reactNativeLiveLink"\n        bottomSeparator\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        LeftComponent={\n          <View style={$logoContainer}>\n            <Image source={reactNativeLiveLogo} style={$logo} />\n          </View>\n        }\n        onPress={() => openLinkInBrowser("https://rn.live/")}\n      />\n      <ListItem\n        tx="demoCommunityScreen.chainReactConferenceLink"\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        LeftComponent={\n          <View style={$logoContainer}>\n            <Image source={chainReactLogo} style={$logo} />\n          </View>\n        }\n        onPress={() => openLinkInBrowser("https://cr.infinite.red/")}\n      />\n      <Text preset="subheading" tx="demoCommunityScreen.hireUsTitle" style={$sectionTitle} />\n      <Text tx="demoCommunityScreen.hireUs" style={$description} />\n      <ListItem\n        tx="demoCommunityScreen.hireUsLink"\n        leftIcon="clap"\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n        onPress={() => openLinkInBrowser("https://infinite.red/contact")}\n      />\n    </Screen>\n  );\n}\n\nconst $container: ViewStyle = {\n  paddingTop: spacing.lg + spacing.xl,\n  paddingHorizontal: spacing.lg,\n};\n\nconst $title: TextStyle = {\n  marginBottom: spacing.sm,\n};\n\nconst $tagline: TextStyle = {\n  marginBottom: spacing.xxl,\n};\n\nconst $description: TextStyle = {\n  marginBottom: spacing.lg,\n};\n\nconst $sectionTitle: TextStyle = {\n  marginTop: spacing.xxl,\n};\n\nconst $logoContainer: ViewStyle = {\n  marginEnd: spacing.md,\n  flexDirection: "row",\n  flexWrap: "wrap",\n  alignContent: "center",\n};\n\nconst $logo: ImageStyle = {\n  height: 38,\n  width: 38,\n};\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/(tabs)/podcasts.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { observer } from "mobx-react-lite";\nimport React, { ComponentType, useEffect, useMemo } from "react";\nimport {\n  AccessibilityProps,\n  ActivityIndicator,\n  Image,\n  ImageSourcePropType,\n  ImageStyle,\n  Platform,\n  StyleSheet,\n  TextStyle,\n  View,\n  ViewStyle,\n} from "react-native";\nimport { type ContentStyle } from "@shopify/flash-list";\nimport Animated, {\n  Extrapolate,\n  interpolate,\n  useAnimatedStyle,\n  useSharedValue,\n  withSpring,\n} from "react-native-reanimated";\nimport { Button, ButtonAccessoryProps, Card, EmptyState, Icon, ListView, Screen, Text, Toggle } from "src/components";\nimport { isRTL, translate } from "src/i18n";\nimport { useStores } from "src/models";\nimport { Episode } from "src/models/Episode";\nimport { colors, spacing } from "src/theme";\nimport { delay } from "src/utils/delay";\nimport { openLinkInBrowser } from "src/utils/openLinkInBrowser";\n\nconst ICON_SIZE = 14;\n\nconst rnrImage1 = require("assets/images/demo/rnr-image-1.png");\nconst rnrImage2 = require("assets/images/demo/rnr-image-2.png");\nconst rnrImage3 = require("assets/images/demo/rnr-image-3.png");\nconst rnrImages = [rnrImage1, rnrImage2, rnrImage3];\n\nexport default observer(function DemoPodcastListScreen(_props) {\n  const { episodeStore } = useStores();\n\n  const [refreshing, setRefreshing] = React.useState(false);\n  const [isLoading, setIsLoading] = React.useState(false);\n\n  // initially, kick off a background refresh without the refreshing UI\n  useEffect(() => {\n    (async function load() {\n      setIsLoading(true);\n      await episodeStore.fetchEpisodes();\n      setIsLoading(false);\n    })();\n  }, [episodeStore]);\n\n  // simulate a longer refresh, if the refresh is too fast for UX\n  async function manualRefresh() {\n    setRefreshing(true);\n    await Promise.all([episodeStore.fetchEpisodes(), delay(750)]);\n    setRefreshing(false);\n  }\n\n  return (\n    <Screen preset="fixed" safeAreaEdges={["top"]} contentContainerStyle={$screenContentContainer}>\n      <ListView<Episode>\n        contentContainerStyle={$listContentContainer}\n        data={episodeStore.episodesForList.slice()}\n        extraData={episodeStore.favorites.length + episodeStore.episodes.length}\n        refreshing={refreshing}\n        estimatedItemSize={177}\n        onRefresh={manualRefresh}\n        ListEmptyComponent={\n          isLoading ? (\n            <ActivityIndicator />\n          ) : (\n            <EmptyState\n              preset="generic"\n              style={$emptyState}\n              headingTx={episodeStore.favoritesOnly ? "demoPodcastListScreen.noFavoritesEmptyState.heading" : undefined}\n              contentTx={episodeStore.favoritesOnly ? "demoPodcastListScreen.noFavoritesEmptyState.content" : undefined}\n              button={episodeStore.favoritesOnly ? "" : undefined}\n              buttonOnPress={manualRefresh}\n              imageStyle={$emptyStateImage}\n              ImageProps={{ resizeMode: "contain" }}\n            />\n          )\n        }\n        ListHeaderComponent={\n          <View style={$heading}>\n            <Text preset="heading" tx="demoPodcastListScreen.title" />\n            {(episodeStore.favoritesOnly || episodeStore.episodesForList.length > 0) && (\n              <View style={$toggle}>\n                <Toggle\n                  value={episodeStore.favoritesOnly}\n                  onValueChange={() => episodeStore.setProp("favoritesOnly", !episodeStore.favoritesOnly)}\n                  variant="switch"\n                  labelTx="demoPodcastListScreen.onlyFavorites"\n                  labelPosition="left"\n                  labelStyle={$labelStyle}\n                  accessibilityLabel={translate("demoPodcastListScreen.accessibility.switch")}\n                />\n              </View>\n            )}\n          </View>\n        }\n        renderItem={({ item }) => (\n          <EpisodeCard\n            episode={item}\n            isFavorite={episodeStore.hasFavorite(item)}\n            onPressFavorite={() => episodeStore.toggleFavorite(item)}\n          />\n        )}\n      />\n    </Screen>\n  );\n});\n\nconst EpisodeCard = observer(function EpisodeCard({\n  episode,\n  isFavorite,\n  onPressFavorite,\n}: {\n  episode: Episode;\n  onPressFavorite: () => void;\n  isFavorite: boolean;\n}) {\n  const liked = useSharedValue(isFavorite ? 1 : 0);\n\n  const imageUri = useMemo<ImageSourcePropType>(() => {\n    return rnrImages[Math.floor(Math.random() * rnrImages.length)];\n  }, []);\n\n  // Grey heart\n  const animatedLikeButtonStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          scale: interpolate(liked.value, [0, 1], [1, 0], Extrapolate.EXTEND),\n        },\n      ],\n      opacity: interpolate(liked.value, [0, 1], [1, 0], Extrapolate.CLAMP),\n    };\n  });\n\n  // Pink heart\n  const animatedUnlikeButtonStyles = useAnimatedStyle(() => {\n    return {\n      transform: [\n        {\n          scale: liked.value,\n        },\n      ],\n      opacity: liked.value,\n    };\n  });\n\n  /**\n   * Android has a "longpress" accessibility action. iOS does not, so we just have to use a hint.\n   * @see https://reactnative.dev/docs/accessibility#accessibilityactions\n   */\n  const accessibilityHintProps = useMemo(\n    () =>\n      Platform.select<AccessibilityProps>({\n        ios: {\n          accessibilityLabel: episode.title,\n          accessibilityHint: translate("demoPodcastListScreen.accessibility.cardHint", {\n            action: isFavorite ? "unfavorite" : "favorite",\n          }),\n        },\n        android: {\n          accessibilityLabel: episode.title,\n          accessibilityActions: [\n            {\n              name: "longpress",\n              label: translate("demoPodcastListScreen.accessibility.favoriteAction"),\n            },\n          ],\n          onAccessibilityAction: ({ nativeEvent }) => {\n            if (nativeEvent.actionName === "longpress") {\n              handlePressFavorite();\n            }\n          },\n        },\n      }),\n    [episode, isFavorite]\n  );\n\n  const handlePressFavorite = () => {\n    onPressFavorite();\n    liked.value = withSpring(liked.value ? 0 : 1);\n  };\n\n  const handlePressCard = () => {\n    openLinkInBrowser(episode.enclosure.link);\n  };\n\n  const ButtonLeftAccessory: ComponentType<ButtonAccessoryProps> = useMemo(\n    () =>\n      function ButtonLeftAccessory() {\n        return (\n          <View>\n            <Animated.View style={[$iconContainer, StyleSheet.absoluteFill, animatedLikeButtonStyles]}>\n              <Icon\n                icon="heart"\n                size={ICON_SIZE}\n                color={colors.palette.neutral800} // dark grey\n              />\n            </Animated.View>\n            <Animated.View style={[$iconContainer, animatedUnlikeButtonStyles]}>\n              <Icon\n                icon="heart"\n                size={ICON_SIZE}\n                color={colors.palette.primary400} // pink\n              />\n            </Animated.View>\n          </View>\n        );\n      },\n    []\n  );\n\n  return (\n    <Card\n      style={$item}\n      verticalAlignment="force-footer-bottom"\n      onPress={handlePressCard}\n      onLongPress={handlePressFavorite}\n      HeadingComponent={\n        <View style={$metadata}>\n          <Text style={$metadataText} size="xxs" accessibilityLabel={episode.datePublished.accessibilityLabel}>\n            {episode.datePublished.textLabel}\n          </Text>\n          <Text style={$metadataText} size="xxs" accessibilityLabel={episode.duration.accessibilityLabel}>\n            {episode.duration.textLabel}\n          </Text>\n        </View>\n      }\n      content={`${episode.parsedTitleAndSubtitle.title} - ${episode.parsedTitleAndSubtitle.subtitle}`}\n      {...accessibilityHintProps}\n      RightComponent={<Image source={imageUri} style={$itemThumbnail} />}\n      FooterComponent={\n        <Button\n          onPress={handlePressFavorite}\n          onLongPress={handlePressFavorite}\n          style={[$favoriteButton, isFavorite && $unFavoriteButton]}\n          accessibilityLabel={\n            isFavorite\n              ? translate("demoPodcastListScreen.accessibility.unfavoriteIcon")\n              : translate("demoPodcastListScreen.accessibility.favoriteIcon")\n          }\n          LeftAccessory={ButtonLeftAccessory}\n        >\n          <Text\n            size="xxs"\n            accessibilityLabel={episode.duration.accessibilityLabel}\n            weight="medium"\n            text={\n              isFavorite\n                ? translate("demoPodcastListScreen.unfavoriteButton")\n                : translate("demoPodcastListScreen.favoriteButton")\n            }\n          />\n        </Button>\n      }\n    />\n  );\n});\n\nconst $screenContentContainer: ViewStyle = {\n  flex: 1,\n};\n\nconst $listContentContainer: ContentStyle = {\n  paddingHorizontal: spacing.lg,\n  paddingTop: spacing.lg + spacing.xl,\n  paddingBottom: spacing.lg,\n};\n\nconst $heading: ViewStyle = {\n  marginBottom: spacing.md,\n};\n\nconst $item: ViewStyle = {\n  padding: spacing.md,\n  marginTop: spacing.md,\n  minHeight: 120,\n};\n\nconst $itemThumbnail: ImageStyle = {\n  marginTop: spacing.sm,\n  borderRadius: 50,\n  alignSelf: "flex-start",\n};\n\nconst $toggle: ViewStyle = {\n  marginTop: spacing.md,\n};\n\nconst $labelStyle: TextStyle = {\n  textAlign: "left",\n};\n\nconst $iconContainer: ViewStyle = {\n  height: ICON_SIZE,\n  width: ICON_SIZE,\n  flexDirection: "row",\n  marginEnd: spacing.sm,\n};\n\nconst $metadata: TextStyle = {\n  color: colors.textDim,\n  marginTop: spacing.xs,\n  flexDirection: "row",\n};\n\nconst $metadataText: TextStyle = {\n  color: colors.textDim,\n  marginEnd: spacing.md,\n  marginBottom: spacing.xs,\n};\n\nconst $favoriteButton: ViewStyle = {\n  borderRadius: 17,\n  marginTop: spacing.md,\n  justifyContent: "flex-start",\n  backgroundColor: colors.palette.neutral300,\n  borderColor: colors.palette.neutral300,\n  paddingHorizontal: spacing.md,\n  paddingTop: spacing.xxxs,\n  paddingBottom: 0,\n  minHeight: 32,\n  alignSelf: "flex-start",\n};\n\nconst $unFavoriteButton: ViewStyle = {\n  borderColor: colors.palette.primary100,\n  backgroundColor: colors.palette.primary100,\n};\n\nconst $emptyState: ViewStyle = {\n  marginTop: spacing.xxl,\n};\n\nconst $emptyStateImage: ImageStyle = {\n  transform: [{ scaleX: isRTL ? -1 : 1 }],\n};\n'})})]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/(tabs)/debug.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React from "react";\nimport * as Application from "expo-application";\nimport { Linking, Platform, TextStyle, View, ViewStyle } from "react-native";\nimport { Button, ListItem, Screen, Text } from "src/components";\nimport { colors, spacing } from "src/theme";\nimport { isRTL } from "src/i18n";\nimport { useStores } from "src/models";\n\nfunction openLinkInBrowser(url: string) {\n  Linking.canOpenURL(url).then((canOpen) => canOpen && Linking.openURL(url));\n}\n\nexport default function DemoDebugScreen() {\n  const {\n    authenticationStore: { logout },\n  } = useStores();\n\n  const usingHermes = typeof HermesInternal === "object" && HermesInternal !== null;\n  // @ts-expect-error\n  const usingFabric = global.nativeFabricUIManager != null;\n\n  const demoReactotron = React.useMemo(\n    () => async () => {\n      if (__DEV__) {\n        console.tron.display({\n          name: "DISPLAY",\n          value: {\n            appId: Application.applicationId,\n            appName: Application.applicationName,\n            appVersion: Application.nativeApplicationVersion,\n            appBuildVersion: Application.nativeBuildVersion,\n            hermesEnabled: usingHermes,\n          },\n          important: true,\n        });\n      }\n    },\n    []\n  );\n\n  return (\n    <Screen preset="scroll" safeAreaEdges={["top"]} contentContainerStyle={$container}>\n      <Text\n        style={$reportBugsLink}\n        tx="demoDebugScreen.reportBugs"\n        onPress={() => openLinkInBrowser("https://github.com/infinitered/ignite/issues")}\n      />\n      <Text style={$title} preset="heading" tx="demoDebugScreen.title" />\n      <View style={$itemsContainer}>\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">App Id</Text>\n              <Text>{Application.applicationId}</Text>\n            </View>\n          }\n        />\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">App Name</Text>\n              <Text>{Application.applicationName}</Text>\n            </View>\n          }\n        />\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">App Version</Text>\n              <Text>{Application.nativeApplicationVersion}</Text>\n            </View>\n          }\n        />\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">App Build Version</Text>\n              <Text>{Application.nativeBuildVersion}</Text>\n            </View>\n          }\n        />\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">Hermes Enabled</Text>\n              <Text>{String(usingHermes)}</Text>\n            </View>\n          }\n        />\n        <ListItem\n          LeftComponent={\n            <View style={$item}>\n              <Text preset="bold">Fabric Enabled</Text>\n              <Text>{String(usingFabric)}</Text>\n            </View>\n          }\n        />\n      </View>\n      <View style={$buttonContainer}>\n        <Button style={$button} tx="demoDebugScreen.reactotron" onPress={demoReactotron} />\n        <Text style={$hint} tx={`demoDebugScreen.${Platform.OS}ReactotronHint` as const} />\n      </View>\n      <View style={$buttonContainer}>\n        <Button style={$button} tx="common.logOut" onPress={logout} />\n      </View>\n    </Screen>\n  );\n}\n\nconst $container: ViewStyle = {\n  paddingTop: spacing.lg + spacing.xl,\n  paddingBottom: spacing.xxl,\n  paddingHorizontal: spacing.lg,\n};\n\nconst $title: TextStyle = {\n  marginBottom: spacing.xxl,\n};\n\nconst $reportBugsLink: TextStyle = {\n  color: colors.tint,\n  marginBottom: spacing.lg,\n  alignSelf: isRTL ? "flex-start" : "flex-end",\n};\n\nconst $item: ViewStyle = {\n  marginBottom: spacing.md,\n};\n\nconst $itemsContainer: ViewStyle = {\n  marginBottom: spacing.xl,\n};\n\nconst $button: ViewStyle = {\n  marginBottom: spacing.xs,\n};\n\nconst $buttonContainer: ViewStyle = {\n  marginBottom: spacing.md,\n};\n\nconst $hint: TextStyle = {\n  color: colors.palette.neutral600,\n  fontSize: 12,\n  lineHeight: 15,\n  paddingBottom: spacing.lg,\n};\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["These will all be navigable by routing to ",(0,o.jsx)(n.code,{children:"/community"}),", ",(0,o.jsx)(n.code,{children:"/podcasts"})," or ",(0,o.jsx)(n.code,{children:"/debug"}),". Next we'll cover the Showroom which is a bit more involved, since we have to add some supporting components that only apply to that route."]}),"\n",(0,o.jsx)(n.h3,{id:"showroom-screen",children:"Showroom Screen"}),"\n",(0,o.jsxs)(n.p,{children:["The Showroom screen has some supporting components it needs that only applies to that route. Ignite used to colocate these next to the screen file itself, in the ",(0,o.jsx)(n.code,{children:"src/app/screens/DemoShowroomScreen"})," directory. However, ",(0,o.jsx)(n.code,{children:"expo-router"})," wants to keep the ",(0,o.jsx)(n.code,{children:"app"})," directory strictly for app routes."]}),"\n",(0,o.jsxs)(n.p,{children:["To adhere to this, we'll move the supporting components to ",(0,o.jsx)(n.code,{children:"src/components/Showroom"})," and import them from their in our ",(0,o.jsx)(n.code,{children:"src/app/(app)/(tabs)/showroom.tsx"}),"."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"mv src/screens/DemoShowroomScreen src/components/Showroom\nrm src/components/Showroom/DemoShowroomScreen.tsx\n"})}),"\n",(0,o.jsxs)(n.blockquote,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"Note"}),": There is a type that gets removed by the above command. Add the following to the top of ",(0,o.jsx)(n.code,{children:"src/components/Showroom/demos/index.ts"})]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import { ReactElement } from "react";\n\nexport interface Demo {\n  name: string;\n  description: string;\n  data: ReactElement[];\n}\n'})}),"\n",(0,o.jsxs)(n.p,{children:["You'll need to update the imports in the ",(0,o.jsx)(n.code,{children:"src/components/Showroom/demos/Demo*.ts"})," files.\nA project-wide search and replace should do the trick:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Project-wide search for ",(0,o.jsx)(n.code,{children:'from "../DemoShowroomScreen"'})]}),"\n",(0,o.jsxs)(n.li,{children:["Replace with ",(0,o.jsx)(n.code,{children:'from "."'})]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["We've deleted the screen file because we'll make a few ",(0,o.jsx)(n.code,{children:"expo-router"})," specific changes to it over in the ",(0,o.jsx)(n.code,{children:"app"})," directory. One improvement we can make to the Showroom screen is that we can reduce the platform specific code with regards to the ",(0,o.jsx)(n.code,{children:"renderItem"})," of ",(0,o.jsx)(n.code,{children:"SectionList"}),"."]}),"\n",(0,o.jsx)(n.p,{children:"Before, we had an implementation for both web and mobile to help with some specific web routing for deep links:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'const WebListItem: FC<DemoListItem> = ({ item, sectionIndex }) => {\n  const sectionSlug = item.name.toLowerCase();\n\n  return (\n    <View>\n      <Link to={`/showroom/${sectionSlug}`} style={$menuContainer}>\n        <Text preset="bold">{item.name}</Text>\n      </Link>\n      {item.useCases.map((u) => {\n        const itemSlug = slugify(u);\n\n        return (\n          <Link key={`section${sectionIndex}-${u}`} to={`/showroom/${sectionSlug}/${itemSlug}`}>\n            <Text>{u}</Text>\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n\nconst NativeListItem: FC<DemoListItem> = ({ item, sectionIndex, handleScroll }) => (\n  <View>\n    <Text onPress={() => handleScroll?.(sectionIndex)} preset="bold" style={$menuContainer}>\n      {item.name}\n    </Text>\n    {item.useCases.map((u, index) => (\n      <ListItem\n        key={`section${sectionIndex}-${u}`}\n        onPress={() => handleScroll?.(sectionIndex, index + 1)}\n        text={u}\n        rightIcon={isRTL ? "caretLeft" : "caretRight"}\n      />\n    ))}\n  </View>\n);\n\nconst ShowroomListItem = Platform.select({\n  web: WebListItem,\n  default: NativeListItem,\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"However, we don't have to worry about this anymore. We can implement this as follows:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'const ShowroomListItem: FC<DemoListItem> = ({ item, sectionIndex }) => {\n  const sectionSlug = item.name.toLowerCase();\n\n  return (\n    <View>\n      <Link href={{ pathname: "/showroom", params: { sectionSlug } }}>\n        <Text preset="bold">{item.name}</Text>\n      </Link>\n      {item.useCases.map((u) => {\n        const itemSlug = slugify(u);\n        return (\n          <Link\n            key={`section${sectionIndex}-${u}`}\n            href={{ pathname: "/showroom", params: { sectionSlug, itemSlug } }}\n            asChild\n          >\n            <ListItem text={u} rightIcon={isRTL ? "caretLeft" : "caretRight"} />\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n'})}),"\n",(0,o.jsxs)(n.p,{children:["Note the ",(0,o.jsx)(n.code,{children:"Link"})," wrapper provided by ",(0,o.jsx)(n.code,{children:"expo-router"}),". We link to the ",(0,o.jsx)(n.code,{children:"/showroom"})," route and provide the extra search params for a section or specific component we want to navigate to. We can then extract (and type) these params using ",(0,o.jsx)(n.code,{children:"useLocalSearchParams"})]}),"\n",(0,o.jsx)(n.p,{children:"The snippet below contains the entire file for reference:"}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/app/(app)/(tabs)/showroom.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'import React, { FC, useEffect, useRef, useState } from "react";\nimport { Image, ImageStyle, SectionList, TextStyle, View, ViewStyle } from "react-native";\nimport { Drawer } from "react-native-drawer-layout";\nimport { type ContentStyle } from "@shopify/flash-list";\nimport { ListItem, ListView, ListViewRef, Screen, Text } from "src/components";\nimport { isRTL } from "src/i18n";\nimport { colors, spacing } from "src/theme";\nimport { useSafeAreaInsetsStyle } from "src/utils/useSafeAreaInsetsStyle";\nimport * as Demos from "src/components/Showroom/demos";\nimport { DrawerIconButton } from "src/components/Showroom/DrawerIconButton";\nimport { Link, useLocalSearchParams } from "expo-router";\n\nconst logo = require("assets/images/logo.png");\n\ninterface DemoListItem {\n  item: { name: string; useCases: string[] };\n  sectionIndex: number;\n  onPress?: () => void;\n}\n\nconst slugify = (str: string) =>\n  str\n    .toLowerCase()\n    .trim()\n    .replace(/[^\\w\\s-]/g, "")\n    .replace(/[\\s_-]+/g, "-")\n    .replace(/^-+|-+$/g, "");\n\nconst ShowroomListItem: FC<DemoListItem> = ({ item, sectionIndex, onPress }) => {\n  const sectionSlug = item.name.toLowerCase();\n\n  return (\n    <View>\n      <Link href={{ pathname: "/showroom", params: { sectionSlug } }} onPress={onPress}>\n        <Text preset="bold">{item.name}</Text>\n      </Link>\n      {item.useCases.map((u) => {\n        const itemSlug = slugify(u);\n        return (\n          <Link\n            key={`section${sectionIndex}-${u}`}\n            href={{ pathname: "/showroom", params: { sectionSlug, itemSlug } }}\n            onPress={onPress}\n            asChild\n          >\n            <ListItem text={u} rightIcon={isRTL ? "caretLeft" : "caretRight"} />\n          </Link>\n        );\n      })}\n    </View>\n  );\n};\n\nexport default function DemoShowroomScreen() {\n  const [open, setOpen] = useState(false);\n  const timeout = useRef<ReturnType<typeof setTimeout>>();\n  const listRef = useRef<SectionList>(null);\n  const menuRef = useRef<ListViewRef<DemoListItem["item"]>>(null);\n\n  const params = useLocalSearchParams<{\n    sectionSlug?: string;\n    itemSlug?: string;\n  }>();\n\n  // handle scroll when section/item params change\n  React.useEffect(() => {\n    if (Object.keys(params).length > 0) {\n      const demoValues = Object.values(Demos);\n      const findSectionIndex = demoValues.findIndex((x) => x.name.toLowerCase() === params.sectionSlug);\n      let findItemIndex = 0;\n      if (params.itemSlug) {\n        try {\n          findItemIndex =\n            demoValues[findSectionIndex].data.findIndex((u) => slugify(u.props.name) === params.itemSlug) + 1;\n        } catch (err) {\n          console.error(err);\n        }\n      }\n      handleScroll(findSectionIndex, findItemIndex);\n    }\n  }, [params]);\n\n  const toggleDrawer = () => {\n    if (!open) {\n      setOpen(true);\n    } else {\n      setOpen(false);\n    }\n  };\n\n  const handleScroll = (sectionIndex: number, itemIndex = 0) => {\n    listRef.current?.scrollToLocation({\n      animated: true,\n      itemIndex,\n      sectionIndex,\n    });\n  };\n\n  const scrollToIndexFailed = (info: {\n    index: number;\n    highestMeasuredFrameIndex: number;\n    averageItemLength: number;\n  }) => {\n    listRef.current?.getScrollResponder()?.scrollToEnd();\n    timeout.current = setTimeout(\n      () =>\n        listRef.current?.scrollToLocation({\n          animated: true,\n          itemIndex: info.index,\n          sectionIndex: 0,\n        }),\n      50\n    );\n  };\n\n  useEffect(() => {\n    return () => timeout.current && clearTimeout(timeout.current);\n  }, []);\n\n  const $drawerInsets = useSafeAreaInsetsStyle(["top"]);\n\n  return (\n    <Drawer\n      open={open}\n      onOpen={() => setOpen(true)}\n      onClose={() => setOpen(false)}\n      drawerType={"slide"}\n      drawerPosition={isRTL ? "right" : "left"}\n      renderDrawerContent={() => (\n        <View style={[$drawer, $drawerInsets]}>\n          <View style={$logoContainer}>\n            <Image source={logo} style={$logoImage} />\n          </View>\n\n          <ListView<DemoListItem["item"]>\n            ref={menuRef}\n            contentContainerStyle={$listContentContainer}\n            estimatedItemSize={250}\n            data={Object.values(Demos).map((d) => ({\n              name: d.name,\n              useCases: d.data.map((u) => u.props.name as string),\n            }))}\n            keyExtractor={(item) => item.name}\n            renderItem={({ item, index: sectionIndex }) => (\n              <ShowroomListItem {...{ item, sectionIndex, onPress }} />\n            )}\n          />\n        </View>\n      )}\n    >\n      <Screen preset="fixed" safeAreaEdges={["top"]} contentContainerStyle={$screenContainer}>\n        <DrawerIconButton onPress={toggleDrawer} {...{ open }} />\n\n        <SectionList\n          ref={listRef}\n          contentContainerStyle={$sectionListContentContainer}\n          stickySectionHeadersEnabled={false}\n          sections={Object.values(Demos)}\n          renderItem={({ item }) => item}\n          renderSectionFooter={() => <View style={$demoUseCasesSpacer} />}\n          ListHeaderComponent={\n            <View style={$heading}>\n              <Text preset="heading" tx="demoShowroomScreen.jumpStart" />\n            </View>\n          }\n          onScrollToIndexFailed={scrollToIndexFailed}\n          renderSectionHeader={({ section }) => {\n            return (\n              <View>\n                <Text preset="heading" style={$demoItemName}>\n                  {section.name}\n                </Text>\n                <Text style={$demoItemDescription}>{section.description}</Text>\n              </View>\n            );\n          }}\n        />\n      </Screen>\n    </Drawer>\n  );\n}\n\nconst $screenContainer: ViewStyle = {\n  flex: 1,\n};\n\nconst $drawer: ViewStyle = {\n  backgroundColor: colors.background,\n  flex: 1,\n};\n\nconst $listContentContainer: ContentStyle = {\n  paddingHorizontal: spacing.lg,\n};\n\nconst $sectionListContentContainer: ViewStyle = {\n  paddingHorizontal: spacing.lg,\n};\n\nconst $heading: ViewStyle = {\n  marginBottom: spacing.xxxl,\n};\n\nconst $logoImage: ImageStyle = {\n  height: 42,\n  width: 77,\n};\n\nconst $logoContainer: ViewStyle = {\n  alignSelf: "flex-start",\n  justifyContent: "center",\n  height: 56,\n  paddingHorizontal: spacing.lg,\n};\n\nconst $demoItemName: TextStyle = {\n  fontSize: 24,\n  marginBottom: spacing.md,\n};\n\nconst $demoItemDescription: TextStyle = {\n  marginBottom: spacing.xxl,\n};\n\nconst $demoUseCasesSpacer: ViewStyle = {\n  paddingBottom: spacing.xxl,\n};\n'})})]}),"\n",(0,o.jsxs)(n.p,{children:["If you head on over to the web app at ",(0,o.jsx)(n.code,{children:"http://localhost:8081/showroom?itemSlug=variants&sectionSlug=toggle"}),", you'll see the Showroom screen will open and scroll down to the appropriate section."]}),"\n",(0,o.jsxs)(n.p,{children:["We can emulate ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/guides/linking/#testing-urls",children:"deep links in Expo Go"})," with the command:"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"npx uri-scheme open exp://localhost:8081/--/showroom --ios\n"})}),"\n",(0,o.jsx)(n.p,{children:"Observe the simulator opens the mobile app and navigates to the Showroom screen."}),"\n",(0,o.jsxs)(n.p,{children:["We get that universal linking for free with ",(0,o.jsx)(n.code,{children:"expo-router"}),"!"]}),"\n",(0,o.jsx)(n.h2,{id:"code-cleanup",children:"Code Cleanup"}),"\n",(0,o.jsx)(n.p,{children:"Now that we have the boilerplate up and running again, let's clean some of the screen and navigation files that are no longer needed."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-bash",children:"rm src/app.tsx\nrm -rf src/screens\nrm -rf src/navigators\n"})}),"\n",(0,o.jsxs)(n.p,{children:["In doing so, we'll need to fix some ",(0,o.jsx)(n.code,{children:"Reactotron"})," code for custom commands. We'll drop the ",(0,o.jsx)(n.code,{children:"resetNavigation"})," one (logging out is really the same thing) and update the ",(0,o.jsx)(n.code,{children:"navigateTo"})," and ",(0,o.jsx)(n.code,{children:"goBack"}),". Open up ",(0,o.jsx)(n.code,{children:"src/devtools/ReactotronConfig.ts"})," to edit these."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-ts",children:'// error-line\nimport { goBack, resetRoot, navigate } from "src/navigators/navigationUtilities";\n// success-line\nimport { router } from "expo-router";\n// ...\n// error-line-start\nreactotron.onCustomCommand({\n  title: "Reset Navigation State",\n  description: "Resets the navigation state",\n  command: "resetNavigation",\n  handler: () => {\n    Reactotron.log("resetting navigation state");\n    resetRoot({ index: 0, routes: [] });\n  },\n});\n// error-line-end\n\nreactotron.onCustomCommand<[{ name: "route"; type: ArgType.String }]>({\n  command: "navigateTo",\n  handler: (args) => {\n    const { route } = args ?? {};\n    if (route) {\n      Reactotron.log(`Navigating to: ${route}`);\n      // error-line\n      navigate(route as any); // this should be tied to the navigator, but since this is for debugging, we can navigate to illegal routes\n      // success-line-start\n      // @ts-ignore - bypass Expo Router Typed Routes\n      router.push(route);\n      // success-line-end\n    } else {\n      Reactotron.log("Could not navigate. No route provided.");\n    }\n  },\n  title: "Navigate To Screen",\n  description: "Navigates to a screen by name.",\n  args: [{ name: "route", type: ArgType.String }],\n});\n\nreactotron.onCustomCommand({\n  title: "Go Back",\n  description: "Goes back",\n  command: "goBack",\n  handler: () => {\n    Reactotron.log("Going back");\n    // error-line\n    goBack();\n    // success-line\n    router.back();\n  },\n});\n'})}),"\n",(0,o.jsx)(n.p,{children:"When navigating to the showroom, you may notice an error in the console:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-terminal",children:"ERROR  Warning: Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?\n"})}),"\n",(0,o.jsxs)(n.p,{children:["This is because the ",(0,o.jsx)(n.code,{children:"expo-router"}),"'s ",(0,o.jsx)(n.code,{children:"<Link>"})," component passes a ref to it's children. To address this we can update our ",(0,o.jsx)(n.code,{children:"ListItem.tsx"})," to correctly handle the\nref passed to it."]}),"\n",(0,o.jsxs)(t,{children:[(0,o.jsx)("summary",{children:"src/components/ListItem.tsx"}),(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",children:'/**\n * A styled row component that can be used in FlatList, SectionList, or by itself.\n * @see [Documentation and Examples]{@link https://docs.infinite.red/ignite-cli/boilerplate/components/ListItem/}\n * @param {ListItemProps} props - The props for the `ListItem` component.\n * @returns {JSX.Element} The rendered `ListItem` component.\n */\n// error-line\n  export function ListItem(props: ListItemProps) {\n// success-line-start\n  export const ListItem = React.forwardRef<View, ListItemProps>(function ListItem(\n  props: ListItemProps,\n  ref,\n) {\n// success-line-end\n  const {\n    bottomSeparator,\n    children,\n    height = 56,\n    LeftComponent,\n    leftIcon,\n    leftIconColor,\n    RightComponent,\n    rightIcon,\n    rightIconColor,\n    style,\n    text,\n    TextProps,\n    topSeparator,\n    tx,\n    txOptions,\n    textStyle: $textStyleOverride,\n    containerStyle: $containerStyleOverride,\n    ...TouchableOpacityProps\n  } = props\n\n  const $textStyles = [$textStyle, $textStyleOverride, TextProps?.style]\n\n  const $containerStyles = [\n    topSeparator && $separatorTop,\n    bottomSeparator && $separatorBottom,\n    $containerStyleOverride,\n  ]\n\n  const $touchableStyles = [$touchableStyle, { minHeight: height }, style]\n\n  return (\n    // error-line\n   <View style={$containerStyles}>\n    // success-line\n   <View ref={ref} style={$containerStyles}>\n      <TouchableOpacity {...TouchableOpacityProps} style={$touchableStyles}>\n        <ListItemAction\n          side="left"\n          size={height}\n          icon={leftIcon}\n          iconColor={leftIconColor}\n          Component={LeftComponent}\n        />\n\n        <Text {...TextProps} tx={tx} text={text} txOptions={txOptions} style={$textStyles}>\n          {children}\n        </Text>\n\n        <ListItemAction\n          side="right"\n          size={height}\n          icon={rightIcon}\n          iconColor={rightIconColor}\n          Component={RightComponent}\n        />\n      </TouchableOpacity>\n    </View>\n  )\n  //error-line\n}\n  //success-line\n})\n\n'})})]}),"\n",(0,o.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,o.jsx)(n.p,{children:"There you have it, a culinary masterpiece of Ignite and Expo Router, shipped in one pizza box. What we achieved here:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Simplified navigation code"}),"\n",(0,o.jsx)(n.li,{children:"Typed routing"}),"\n",(0,o.jsxs)(n.li,{children:["Examples of many aspects of ",(0,o.jsx)(n.code,{children:"expo-router"}),", such as authentication, tab navigation, search params"]}),"\n",(0,o.jsxs)(n.li,{children:["Deep linking that Just Works",(0,o.jsx)("sup",{children:"TM"})," on both web and mobile"]}),"\n",(0,o.jsx)(n.li,{children:"Reduced Platform specific code"}),"\n"]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://github.com/Jpoliachik/ignite-expo-router",children:"Full Example Repo"})}),"\n",(0,o.jsx)(n.h2,{id:"additional-resources",children:"Additional Resources"}),"\n",(0,o.jsxs)(n.p,{children:["To go more in-depth on ",(0,o.jsx)(n.code,{children:"expo-router"}),", check out the official documentation at ",(0,o.jsx)(n.a,{href:"https://docs.expo.dev/routing/introduction/",children:"Expo.dev"}),"."]}),"\n",(0,o.jsxs)(n.p,{children:["You can also follow Evan Bacon, the author of Expo Router, on ",(0,o.jsx)(n.a,{href:"https://github.com/EvanBacon/expo-router-twitter/blob/main/app/_layout.tsx",children:"GitHub"})," and check out his applications or demos using the navigation library."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/EvanBacon/pillar-valley/",children:"Pillar Valley"})," - a game built in Expo using `expo-router``"]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.a,{href:"https://github.com/EvanBacon/expo-router-twitter/",children:"Twitter routing demo"})," - a demo of how an ",(0,o.jsx)(n.code,{children:"expo-router"})," application would look if rebuilding Twitter's routes"]}),"\n"]}),"\n",(0,o.jsxs)(n.p,{children:["Additionally, here is an Ignite repo with ",(0,o.jsx)(n.code,{children:"expo-router"})," added in for reference on my ",(0,o.jsx)(n.a,{href:"https://github.com/Jpoliachik/ignite-expo-router",children:"GitHub"})]})]})}function p(e={}){const{wrapper:n}={...(0,s.M)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},2172:(e,n,t)=>{t.d(n,{I:()=>a,M:()=>i});var o=t(1504);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);