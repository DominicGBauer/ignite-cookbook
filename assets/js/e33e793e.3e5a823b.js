"use strict";(self.webpackChunkignite_cookbook=self.webpackChunkignite_cookbook||[]).push([[7100],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},s=Object.keys(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(o=0;o<s.length;o++)n=s[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=o.createContext({}),p=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=p(e.components);return o.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(l,".").concat(m)]||c[m]||u[m]||s;return n?o.createElement(h,r(r({ref:t},d),{},{components:n})):o.createElement(h,r({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var s=n.length,r=new Array(s);r[0]=c;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var p=2;p<s;p++)r[p]=n[p];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8312:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var o=n(7462),a=(n(7294),n(3905));const s={title:"Zustand",description:"How to migrate a Mobx-State-Tree project to Zustand",tags:["Zustand","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:new Date("2024-02-05T00:00:00.000Z")},r="Zustand",i={unversionedId:"recipes/Zustand",id:"recipes/Zustand",title:"Zustand",description:"How to migrate a Mobx-State-Tree project to Zustand",source:"@site/docs/recipes/Zustand.md",sourceDirName:"recipes",slug:"/recipes/Zustand",permalink:"/docs/recipes/Zustand",draft:!1,tags:[{label:"Zustand",permalink:"/docs/tags/zustand"},{label:"MobX",permalink:"/docs/tags/mob-x"},{label:"State Management",permalink:"/docs/tags/state-management"}],version:"current",lastUpdatedBy:"Justin Poliachik",lastUpdatedAt:1707844850,formattedLastUpdatedAt:"Feb 13, 2024",frontMatter:{title:"Zustand",description:"How to migrate a Mobx-State-Tree project to Zustand",tags:["Zustand","MobX","State Management"],last_update:{author:"Justin Poliachik"},publish_date:"2024-02-05T00:00:00.000Z"},sidebar:"mainSidebar",previous:{title:"Using Screen Readers",permalink:"/docs/recipes/UsingScreenReaders"},next:{title:"Overview",permalink:"/docs/archive/"}},l={},p=[{value:"Convert MobX-State-Tree Models to Zustand",id:"convert-mobx-state-tree-models-to-zustand",level:2},{value:"Remove MobX-State-Tree",id:"remove-mobx-state-tree",level:2},{value:"Create Store",id:"create-store",level:2},{value:"Use Zustand in Components",id:"use-zustand-in-components",level:2},{value:"Persist Zustand Store",id:"persist-zustand-store",level:2}],d={toc:p};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"zustand"},"Zustand"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/pmndrs/zustand"},"Zustand"),' is a "bearbones" state management solution (hence the cute bear mascot).\nIts a relatively simple and unopinionated option to manage application state, with a hooks-based API for easy use in a React app.'),(0,a.kt)("p",null,"This guide will show you how to migrate a MobX-State-Tree project (Ignite's default) to Zustand, using a new Ignite project as an example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"npx ignite-cli new ZustandApp --yes\n")),(0,a.kt)("p",null,"If you are converting an existing project these steps still apply, but you may also need to migrate other related functionality."),(0,a.kt)("p",null,"Check out the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/Jpoliachik/ignite-zustand"},"Final Source Code")," or follow along below!"),(0,a.kt)("h2",{id:"convert-mobx-state-tree-models-to-zustand"},"Convert MobX-State-Tree Models to Zustand"),(0,a.kt)("p",null,"Our Ignite Demo App includes a few MobX-State-Tree models inside ",(0,a.kt)("inlineCode",{parentName:"p"},"app/models"),". Before we remove those, let's convert them to Zustand!"),(0,a.kt)("p",null,"First, add ",(0,a.kt)("inlineCode",{parentName:"p"},"zustand"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"yarn add zustand\n")),(0,a.kt)("p",null,"Create a directory for our new Zustand store files:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-terminal"},"mkdir app/store\n")),(0,a.kt)("admonition",{type:"note"},(0,a.kt)("p",{parentName:"admonition"},"If you Ignited a demo-free project ",(0,a.kt)("inlineCode",{parentName:"p"},"npx ignite-cli new ZustandApp --yes --removeDemo")," or if you don't have any existing models to convert and you're already familiar with Zustand, feel free to ",(0,a.kt)("a",{parentName:"p",href:"#remove-mobx-state-tree"},"skip this section"),".")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"AuthenticationStore")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"For reference, here's the original AuthenticationStore with MobX-State-Tree:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/models/AuthenticationStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Instance, SnapshotOut, types } from "mobx-state-tree";\n\nexport const AuthenticationStoreModel = types\n  .model("AuthenticationStore")\n  .props({\n    authToken: types.maybe(types.string),\n    authEmail: "",\n  })\n  .views((store) => ({\n    get isAuthenticated() {\n      return !!store.authToken;\n    },\n    get validationError() {\n      if (store.authEmail.length === 0) return "can\'t be blank";\n      if (store.authEmail.length < 6) return "must be at least 6 characters";\n      if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(store.authEmail)) return "must be a valid email address";\n      return "";\n    },\n  }))\n  .actions((store) => ({\n    setAuthToken(value?: string) {\n      store.authToken = value;\n    },\n    setAuthEmail(value: string) {\n      store.authEmail = value.replace(/ /g, "");\n    },\n    logout() {\n      store.authToken = undefined;\n      store.authEmail = "";\n    },\n  }));\n\nexport interface AuthenticationStore extends Instance<typeof AuthenticationStoreModel> {}\nexport interface AuthenticationStoreSnapshot extends SnapshotOut<typeof AuthenticationStoreModel> {}\n'))),(0,a.kt)("p",null,"MobX-State-Tree models declare the data type, initial values, derived values, and actions all in one.",(0,a.kt)("br",{parentName:"p"}),"\n",'Zustand takes a "barebones" approach and defines a store as a basic state object with data and actions co-located.'),(0,a.kt)("p",null,"Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"app/store/AuthenticationStore.ts")," and convert the model to Zustand to look like this:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/AuthenticationStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { StateCreator } from "zustand";\nimport { RootStore } from "./RootStore";\n\n// Typescript interface for this store slice\nexport interface AuthenticationStore {\n  authToken?: string;\n  authEmail: string;\n  setAuthToken: (value?: string) => void;\n  setAuthEmail: (value: string) => void;\n  logout: () => void;\n}\n\n// create our store slice with default data and actions\nexport const createAuthenticationSlice: StateCreator<RootStore, [], [], AuthenticationStore> = (set) => ({\n  authToken: undefined,\n  authEmail: "",\n  setAuthToken: (value) => set({ authToken: value }),\n  setAuthEmail: (value) => set({ authEmail: value.replace(/ /g, "") }),\n  logout: () => set({ authToken: undefined, authEmail: "" }),\n});\n\n// a selector can be used to grab the full AuthenticationStore\nexport const authenticationStoreSelector = (state: RootStore) => ({\n  authToken: state.authToken,\n  authEmail: state.authEmail,\n  isAuthenticated: isAuthenticatedSelector(state),\n  setAuthToken: state.setAuthToken,\n  setAuthEmail: state.setAuthEmail,\n  logout: state.logout,\n});\n\n// selectors can also be used for derived values\nexport const isAuthenticatedSelector = (state: RootStore) => !!state.authToken;\n\nexport const validationErrorSelector = (state: RootStore) => {\n  if (state.authEmail.length === 0) return "can\'t be blank";\n  if (state.authEmail.length < 6) return "must be at least 6 characters";\n  if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(state.authEmail)) return "must be a valid email address";\n  return "";\n};\n')),(0,a.kt)("p",null,"A few things to note:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We're using the ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/pmndrs/zustand/blob/main/docs/guides/slices-pattern.md"},"slices pattern")," to create AuthenticationStore as a slice of the overall state."),(0,a.kt)("li",{parentName:"ul"},"Zustand doesn't validate data, so we need to explicitly define the Typescript interface ",(0,a.kt)("inlineCode",{parentName:"li"},"AuthenticationStore"),"."),(0,a.kt)("li",{parentName:"ul"},"We've created several selectors for our derived values. These can be chained together, or used directly in a component via ",(0,a.kt)("inlineCode",{parentName:"li"},"useStore(mySelector)"),". You'll see how these are used in components later."),(0,a.kt)("li",{parentName:"ul"},"Zustand is very non-opinionated, so there are many different ways to achieve this! Keep this in mind if your app has different use cases, or if you'd like to experiment with alternative strategies for creating your stores.")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"EpisodeStore")),(0,a.kt)("p",null,"Follow the same pattern to convert ",(0,a.kt)("inlineCode",{parentName:"p"},"app/models/EpisodeStore.ts")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Original MobX-State-Tree EpisodeStore for reference:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/models/EpisodeStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Instance, SnapshotOut, types } from "mobx-state-tree";\nimport { api } from "../services/api";\nimport { Episode, EpisodeModel } from "./Episode";\nimport { withSetPropAction } from "./helpers/withSetPropAction";\n\nexport const EpisodeStoreModel = types\n  .model("EpisodeStore")\n  .props({\n    episodes: types.array(EpisodeModel),\n    favorites: types.array(types.reference(EpisodeModel)),\n    favoritesOnly: false,\n  })\n  .actions(withSetPropAction)\n  .actions((store) => ({\n    async fetchEpisodes() {\n      const response = await api.getEpisodes();\n      if (response.kind === "ok") {\n        store.setProp("episodes", response.episodes);\n      } else {\n        console.error(`Error fetching episodes: ${JSON.stringify(response)}`);\n      }\n    },\n    addFavorite(episode: Episode) {\n      store.favorites.push(episode);\n    },\n    removeFavorite(episode: Episode) {\n      store.favorites.remove(episode);\n    },\n  }))\n  .views((store) => ({\n    get episodesForList() {\n      return store.favoritesOnly ? store.favorites : store.episodes;\n    },\n\n    hasFavorite(episode: Episode) {\n      return store.favorites.includes(episode);\n    },\n  }))\n  .actions((store) => ({\n    toggleFavorite(episode: Episode) {\n      if (store.hasFavorite(episode)) {\n        store.removeFavorite(episode);\n      } else {\n        store.addFavorite(episode);\n      }\n    },\n  }));\n\nexport interface EpisodeStore extends Instance<typeof EpisodeStoreModel> {}\nexport interface EpisodeStoreSnapshot extends SnapshotOut<typeof EpisodeStoreModel> {}\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Converted EpisodeStore using Zustand:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/EpisodeStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { api } from "../services/api";\nimport { Episode } from "./Episode";\nimport { StateCreator } from "zustand";\nimport { RootStore } from "./RootStore";\n\nexport interface EpisodeStore {\n  episodes: Episode[];\n  favorites: string[];\n  favoritesOnly: boolean;\n\n  fetchEpisodes: () => Promise<void>;\n  addFavorite: (episode: Episode) => void;\n  removeFavorite: (episode: Episode) => void;\n  toggleFavorite: (episode: Episode) => void;\n  setFavoritesOnly: (value: boolean) => void;\n}\n\nexport const createEpisodeSlice: StateCreator<RootStore, [], [], EpisodeStore> = (set, get) => ({\n  episodes: [],\n  favorites: [],\n  favoritesOnly: false,\n\n  // Zustand supports async actions\n  fetchEpisodes: async () => {\n    const response = await api.getEpisodes();\n    if (response.kind === "ok") {\n      set({ episodes: response.episodes });\n    } else {\n      console.error(`Error fetching episodes: ${JSON.stringify(response)}`);\n    }\n  },\n  addFavorite: (episode) => set((state) => ({ favorites: [...state.favorites, episode.guid] })),\n  removeFavorite: (episode) => set((state) => ({ favorites: state.favorites.filter((guid) => guid !== episode.guid) })),\n  toggleFavorite: (episode) => {\n    // get() can be used within actions\n    if (get().favorites.includes(episode.guid)) {\n      get().removeFavorite(episode);\n    } else {\n      get().addFavorite(episode);\n    }\n  },\n  setFavoritesOnly: (value: boolean) => set({ favoritesOnly: value }),\n});\n\nexport const episodeStoreSelector = (state: RootStore) => ({\n  episodes: state.episodes,\n  favorites: state.favorites,\n  favoritesOnly: state.favoritesOnly,\n\n  // derived values can be included in selectors like this\n  episodesForList: getEpisodesForList(state),\n\n  fetchEpisodes: state.fetchEpisodes,\n  addFavorite: state.addFavorite,\n  removeFavorite: state.removeFavorite,\n  toggleFavorite: state.toggleFavorite,\n  setFavoritesOnly: state.setFavoritesOnly,\n\n  // we can also include helper functions that have access to state\n  hasFavorite: (episode: Episode) => {\n    return state.favorites.includes(episode.guid);\n  },\n});\n\nexport const getEpisodesForList = (store: EpisodeStore) => {\n  return store.favoritesOnly ? store.episodes.filter((a) => store.favorites.includes(a.guid)) : store.episodes;\n};\n'))),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Episode")),(0,a.kt)("p",null,"So far, ",(0,a.kt)("inlineCode",{parentName:"p"},"AuthenticationStore")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"EpisodeStore")," converted cleanly into Zustand store slices. But we also have ",(0,a.kt)("inlineCode",{parentName:"p"},"app/models/Episode.ts"),", which is less of a data store and more of a basic data model. We don't need a Zustand slice for ",(0,a.kt)("inlineCode",{parentName:"p"},"Episode"),", and Zustand is not opinionated about how data models are defined, so let's convert this into a set of Typescript types to define the data model and a few basic util functions for the derived values."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Another very popular method is to use ",(0,a.kt)("a",{parentName:"li",href:"https://zod.dev/"},"Zod"),", which also enables data validation at runtime for better safety.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Original MobX-State-Tree Episode.ts file for reference:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/models/Episode.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { Instance, SnapshotIn, SnapshotOut, types } from "mobx-state-tree";\nimport { withSetPropAction } from "./helpers/withSetPropAction";\nimport { formatDate } from "../utils/formatDate";\nimport { translate } from "../i18n";\n\ninterface Enclosure {\n  link: string;\n  type: string;\n  length: number;\n  duration: number;\n  rating: { scheme: string; value: string };\n}\n\n/**\n * This represents an episode of React Native Radio.\n */\nexport const EpisodeModel = types\n  .model("Episode")\n  .props({\n    guid: types.identifier,\n    title: "",\n    pubDate: "", // Ex: 2022-08-12 21:05:36\n    link: "",\n    author: "",\n    thumbnail: "",\n    description: "",\n    content: "",\n    enclosure: types.frozen<Enclosure>(),\n    categories: types.array(types.string),\n  })\n  .actions(withSetPropAction)\n  .views((episode) => ({\n    get parsedTitleAndSubtitle() {\n      const defaultValue = { title: episode.title?.trim(), subtitle: "" };\n\n      if (!defaultValue.title) return defaultValue;\n\n      const titleMatches = defaultValue.title.match(/^(RNR.*\\d)(?: - )(.*$)/);\n\n      if (!titleMatches || titleMatches.length !== 3) return defaultValue;\n\n      return { title: titleMatches[1], subtitle: titleMatches[2] };\n    },\n    get datePublished() {\n      try {\n        const formatted = formatDate(episode.pubDate);\n        return {\n          textLabel: formatted,\n          accessibilityLabel: translate("demoPodcastListScreen.accessibility.publishLabel", {\n            date: formatted,\n          }),\n        };\n      } catch (error) {\n        return { textLabel: "", accessibilityLabel: "" };\n      }\n    },\n    get duration() {\n      const seconds = Number(episode.enclosure.duration);\n      const h = Math.floor(seconds / 3600);\n      const m = Math.floor((seconds % 3600) / 60);\n      const s = Math.floor((seconds % 3600) % 60);\n\n      const hDisplay = h > 0 ? `${h}:` : "";\n      const mDisplay = m > 0 ? `${m}:` : "";\n      const sDisplay = s > 0 ? s : "";\n      return {\n        textLabel: hDisplay + mDisplay + sDisplay,\n        accessibilityLabel: translate("demoPodcastListScreen.accessibility.durationLabel", {\n          hours: h,\n          minutes: m,\n          seconds: s,\n        }),\n      };\n    },\n  }));\n\nexport interface Episode extends Instance<typeof EpisodeModel> {}\nexport interface EpisodeSnapshotOut extends SnapshotOut<typeof EpisodeModel> {}\nexport interface EpisodeSnapshotIn extends SnapshotIn<typeof EpisodeModel> {}\n'))),(0,a.kt)("details",null,(0,a.kt)("summary",null,"Updated Episode.ts model using Typescript types and util functions"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/Episode.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { formatDate } from "../utils/formatDate";\nimport { translate } from "../i18n";\n\ninterface Enclosure {\n  link: string;\n  type: string;\n  length: number;\n  duration: number;\n  rating: { scheme: string; value: string };\n}\n\nexport type Episode = {\n  guid: string;\n  title: string;\n  pubDate: string;\n  link: string;\n  author: string;\n  thumbnail: string;\n  description: string;\n  content: string;\n  enclosure: Enclosure;\n  categories: string[];\n};\n\nexport const getParsedTitleAndSubtitle = (episode: Episode) => {\n  const defaultValue = { title: episode.title?.trim(), subtitle: "" };\n\n  if (!defaultValue.title) return defaultValue;\n\n  const titleMatches = defaultValue.title.match(/^(RNR.*\\d)(?: - )(.*$)/);\n\n  if (!titleMatches || titleMatches.length !== 3) return defaultValue;\n\n  return { title: titleMatches[1], subtitle: titleMatches[2] };\n};\n\nexport const getDatePublished = (episode: Episode) => {\n  try {\n    const formatted = formatDate(episode.pubDate);\n    return {\n      textLabel: formatted,\n      accessibilityLabel: translate("demoPodcastListScreen.accessibility.publishLabel", {\n        date: formatted,\n      }),\n    };\n  } catch (error) {\n    return { textLabel: "", accessibilityLabel: "" };\n  }\n};\n\nexport const getDuration = (episode: Episode) => {\n  const seconds = Number(episode.enclosure.duration);\n  const h = Math.floor(seconds / 3600);\n  const m = Math.floor((seconds % 3600) / 60);\n  const s = Math.floor((seconds % 3600) % 60);\n\n  const hDisplay = h > 0 ? `${h}:` : "";\n  const mDisplay = m > 0 ? `${m}:` : "";\n  const sDisplay = s > 0 ? s : "";\n  return {\n    textLabel: hDisplay + mDisplay + sDisplay,\n    accessibilityLabel: translate("demoPodcastListScreen.accessibility.durationLabel", {\n      hours: h,\n      minutes: m,\n      seconds: s,\n    }),\n  };\n};\n'))),(0,a.kt)("h2",{id:"remove-mobx-state-tree"},"Remove MobX-State-Tree"),(0,a.kt)("p",null,"Now that our models have been converted, follow our recipe to ",(0,a.kt)("a",{parentName:"p",href:"/docs/recipes/RemoveMobxStateTree"},"Remove MobX-State-Tree")," entirely from your project."),(0,a.kt)("h2",{id:"create-store"},"Create Store"),(0,a.kt)("p",null,"Let's create our main Zustand store. Create a new file ",(0,a.kt)("inlineCode",{parentName:"p"},"app/store/RootStore.ts"),":"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/RootStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { create } from "zustand";\nimport { useShallow } from "zustand/react/shallow";\nimport { AuthenticationStore, authenticationStoreSelector, createAuthenticationSlice } from "./AuthenticationStore";\nimport { EpisodeStore, createEpisodeSlice, episodeStoreSelector } from "./EpisodeStore";\n\nexport interface RootStore extends AuthenticationStore, EpisodeStore {}\n\nexport const useStore = create<RootStore>()((...a) => ({\n  ...createAuthenticationSlice(...a),\n  ...createEpisodeSlice(...a),\n  // add your state slices here\n}));\n\n// optional: custom hooks can be used to pick pieces from state\n// useShallow is used to help prevent unnecessary rerenders\nexport const useAuthenticationStore = () => useStore(useShallow(authenticationStoreSelector));\nexport const useEpisodeStore = () => useStore(useShallow(episodeStoreSelector));\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We're combining AuthenticationStore and EpisodeStore into one Zustand store for simplicity. Again, Zustand is very non-opinionated so you can modify this structure if desired."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"useAuthenticationStore")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"useEpisodeStore")," are exported as custom hooks to make it easier to select common pieces of state. Feel free to create additional custom hooks for reusable lookup patterns and prevent unnecessary re-renders ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/pmndrs/zustand?tab=readme-ov-file#selecting-multiple-state-slices"},"Read more about this"),".")),(0,a.kt)("p",null,"Create ",(0,a.kt)("inlineCode",{parentName:"p"},"store/index.ts")," file to export our hooks and selectors for easy use across our app:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/index.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'export * from "./RootStore";\nexport * from "./AuthenticationStore";\nexport * from "./EpisodeStore";\nexport * from "./Episode";\n')),(0,a.kt)("h2",{id:"use-zustand-in-components"},"Use Zustand in Components"),(0,a.kt)("p",null,"Zustand's hooks-based API makes it easy to pull data into components."),(0,a.kt)("p",null,"In the Ignite Demo App, we'll update the following components to use our exported Zustand hooks and selectors:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/navigators/AppNavigator.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},'import { useStore, isAuthenticatedSelector } from "app/store";\n\nconst AppStack = () => {\n\n  // use a selector to pick only that value\n  const isAuthenticated = useStore(isAuthenticatedSelector)\n\n  return (\n    <Stack.Navigator\n    ...\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/screens/LoginScreen.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"// pick several values & actions from the AuthenticationStore\nconst { authEmail, setAuthEmail, setAuthToken } = useAuthenticationStore();\n// we can also use multiple hooks\nconst validationError = useStore(validationErrorSelector);\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/screens/DemoPodcastListScreen.tsx"))),(0,a.kt)("p",null,"Several changes are needed here. We'll use ",(0,a.kt)("inlineCode",{parentName:"p"},"useEpisodeStore")," to select all the data and actions we need from EpisodeStore:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import {\n  useEpisodeStore,\n  Episode,\n  getDatePublished,\n  getDuration,\n  getParsedTitleAndSubtitle,\n} from "app/store"\n\n...\n\nconst episodeStore = useEpisodeStore();\n')),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'<Toggle\n  value={episodeStore.favoritesOnly}\n  onValueChange={() =>\n--  episodeStore.setProp("favoritesOnly", !episodeStore.favoritesOnly)\n++  episodeStore.setFavoritesOnly(!episodeStore.favoritesOnly)\n  }\n\n')),(0,a.kt)("p",null,"We also need to update how we get derived values from ",(0,a.kt)("inlineCode",{parentName:"p"},"Episode")," now that we're working with a plain object in Zustand without custom getters. Instead of ",(0,a.kt)("inlineCode",{parentName:"p"},"episode.duration")," we can use our util function ",(0,a.kt)("inlineCode",{parentName:"p"},"getDuration"),". Add these lines to the render function of ",(0,a.kt)("inlineCode",{parentName:"p"},"EpisodeCard"),", and replace a few spots those values are used."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"const datePublished = getDatePublished(episode);\nconst duration = getDuration(episode);\nconst parsedTitleAndSubtitle = getParsedTitleAndSubtitle(episode);\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},' <Text\n  style={$metadataText}\n  size="xxs"\n--accessibilityLabel={episode.datePublished.accessibilityLabel}\n++accessibilityLabel={datePublished.accessibilityLabel}\n>\n--{episode.datePublished.textLabel}\n++{datePublished.textLabel}\n</Text>\n')),(0,a.kt)("p",null,"A few additional updates to make in Ignite's Demo App:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/screens/WelcomeScreen.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'++import { useStore } from "app/store"\n\n--const {\n--  authenticationStore: { logout },\n--} = useStores()\n++const logout = useStore((state) => state.logout)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/screens/DemoDebugScreen.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'++import { useStore } from "app/store"\n\n--const {\n--  authenticationStore: { logout },\n--} = useStores()\n++const logout = useStore((state) => state.logout)\n')),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/services/api/api.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'+import { Episode } from "app/store/Episode";\n\n-const episodes: EpisodeSnapshotIn[] =\n+const episodes: Episode[] =\n')),(0,a.kt)("h2",{id:"persist-zustand-store"},"Persist Zustand Store"),(0,a.kt)("p",null,"Zustand ships with ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/pmndrs/zustand/blob/main/docs/integrations/persisting-store-data.md"},"persistence middlware"),". Let's hook it up!"),(0,a.kt)("p",null,"Update ",(0,a.kt)("inlineCode",{parentName:"p"},"RootStore")," to look like this:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/store/RootStore.ts"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'import { create } from "zustand";\nimport { useShallow } from "zustand/react/shallow";\nimport { persist, createJSONStorage } from "zustand/middleware";\n\nimport { AuthenticationStore, authenticationStoreSelector, createAuthenticationSlice } from "./AuthenticationStore";\nimport { EpisodeStore, createEpisodeSlice, episodeStoreSelector } from "./EpisodeStore";\nimport AsyncStorage from "@react-native-async-storage/async-storage";\n\nexport interface RootStore extends AuthenticationStore, EpisodeStore {\n  _hasHydrated: boolean;\n  setHasHydrated: (state: boolean) => void;\n}\n\nexport const useStore = create<RootStore>()(\n  persist(\n    (...a) => ({\n      ...createAuthenticationSlice(...a),\n      ...createEpisodeSlice(...a),\n      // add your state slices here\n\n      _hasHydrated: false,\n      setHasHydrated: (state) => {\n        const set = a[0];\n        set({\n          _hasHydrated: state,\n        });\n      },\n    }),\n    {\n      name: "zustand-app",\n      storage: createJSONStorage(() => AsyncStorage),\n      onRehydrateStorage: () => (state) => {\n        state?.setHasHydrated(true);\n      },\n    }\n  )\n);\n\nexport const useAuthenticationStore = () => useStore(useShallow(authenticationStoreSelector));\nexport const useEpisodeStore = () => useStore(useShallow(episodeStoreSelector));\n')),(0,a.kt)("p",null,"We added the ",(0,a.kt)("inlineCode",{parentName:"p"},"persist")," middleware and created ",(0,a.kt)("inlineCode",{parentName:"p"},"_hasHydrated")," property & action to track ",(0,a.kt)("inlineCode",{parentName:"p"},"AsyncStorage")," hydration. This will automatically persist and hydrate your Zustand store! We just need to handle the loading state during initial hydration:"),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},(0,a.kt)("inlineCode",{parentName:"strong"},"app/app.tsx"))),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-diff"},'+import { useStore } from "./store"\n\n...\n\nconst [areFontsLoaded] = useFonts(customFontsToLoad)\n\n-useEffect(() => {\n-  hideSplashScreen()\n-}, [])\n\n+const hasHydrated = useStore((state) => state._hasHydrated)\n+useEffect(() => {\n+  if (hasHydrated) {\n+    setTimeout(hideSplashScreen, 500)\n+  }\n+}, [hasHydrated])\n\n-if (!isNavigationStateRestored || !areFontsLoaded) return null\n+if (!hasHydrated || !isNavigationStateRestored || !areFontsLoaded) return null\n\n')),(0,a.kt)("p",null,"And we're all set!"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/Jpoliachik/ignite-zustand"},"Full Source Code")))}u.isMDXComponent=!0}}]);